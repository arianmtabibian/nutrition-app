{"ast":null,"code":"import{useState,useEffect}from'react';const LOCAL_POSTS_KEY='nutritrack_local_posts';export const usePostPersistence=()=>{const[localPosts,setLocalPosts]=useState([]);// Load local posts on mount\nuseEffect(()=>{try{const stored=localStorage.getItem(LOCAL_POSTS_KEY);if(stored){const posts=JSON.parse(stored);console.log('üîÑ usePostPersistence: Loaded local posts:',posts.length);setLocalPosts(posts);}}catch(error){console.error('‚ùå Error loading local posts:',error);setLocalPosts([]);}},[]);// Save a new post locally\nconst savePostLocally=post=>{try{console.log('üíæ usePostPersistence: Saving post locally:',post.id);const updatedPosts=[post,...localPosts.filter(p=>p.id!==post.id)];setLocalPosts(updatedPosts);localStorage.setItem(LOCAL_POSTS_KEY,JSON.stringify(updatedPosts));console.log('‚úÖ usePostPersistence: Post saved successfully');}catch(error){console.error('‚ùå Error saving post locally:',error);}};// Merge server posts with local posts\nconst mergeWithServerPosts=serverPosts=>{try{console.log('üîÑ usePostPersistence: Merging posts');console.log('üíæ Local posts:',localPosts.length);console.log('üåê Server posts:',serverPosts.length);const merged=[...localPosts];let addedFromServer=0;serverPosts.forEach(serverPost=>{const existsLocally=localPosts.some(localPost=>{const idMatch=localPost.id===serverPost.id;const contentMatch=localPost.content===serverPost.content;const timeMatch=Math.abs(new Date(localPost.created_at).getTime()-new Date(serverPost.created_at).getTime())<15000;// 15 second window\nreturn idMatch||contentMatch&&timeMatch;});if(!existsLocally){merged.push(serverPost);addedFromServer++;}});// Sort by creation date (newest first)\nmerged.sort((a,b)=>new Date(b.created_at).getTime()-new Date(a.created_at).getTime());console.log('‚úÖ usePostPersistence: Merged successfully:',merged.length,'total posts');console.log(\"   - \".concat(localPosts.length,\" local posts\"));console.log(\"   - \".concat(addedFromServer,\" added from server\"));// Clean up old local posts (older than 10 minutes)\nconst tenMinutesAgo=Date.now()-10*60*1000;const recentLocalPosts=localPosts.filter(post=>new Date(post.created_at).getTime()>tenMinutesAgo);if(recentLocalPosts.length!==localPosts.length){console.log('üßπ usePostPersistence: Cleaning up old local posts');setLocalPosts(recentLocalPosts);localStorage.setItem(LOCAL_POSTS_KEY,JSON.stringify(recentLocalPosts));}return merged;}catch(error){console.error('‚ùå Error merging posts:',error);return serverPosts;}};// Clear all local posts\nconst clearLocalPosts=()=>{try{console.log('üßπ usePostPersistence: Clearing all local posts');setLocalPosts([]);localStorage.removeItem(LOCAL_POSTS_KEY);}catch(error){console.error('‚ùå Error clearing local posts:',error);}};return{localPosts,savePostLocally,mergeWithServerPosts,clearLocalPosts};};","map":{"version":3,"names":["useState","useEffect","LOCAL_POSTS_KEY","usePostPersistence","localPosts","setLocalPosts","stored","localStorage","getItem","posts","JSON","parse","console","log","length","error","savePostLocally","post","id","updatedPosts","filter","p","setItem","stringify","mergeWithServerPosts","serverPosts","merged","addedFromServer","forEach","serverPost","existsLocally","some","localPost","idMatch","contentMatch","content","timeMatch","Math","abs","Date","created_at","getTime","push","sort","a","b","concat","tenMinutesAgo","now","recentLocalPosts","clearLocalPosts","removeItem"],"sources":["C:/Users/arian/OneDrive/Desktop/Nutrition/client/src/hooks/usePostPersistence.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\ninterface Post {\r\n  id: number;\r\n  content: string;\r\n  image_url: string | null;\r\n  meal_data: any;\r\n  likes_count: number;\r\n  comments_count: number;\r\n  is_liked: boolean;\r\n  is_bookmarked: boolean;\r\n  allow_comments?: boolean;\r\n  hide_like_count?: boolean;\r\n  created_at: string;\r\n  user: {\r\n    id: number;\r\n    username: string;\r\n    first_name: string;\r\n    last_name: string;\r\n    profile_picture?: string;\r\n  };\r\n}\r\n\r\nconst LOCAL_POSTS_KEY = 'nutritrack_local_posts';\r\n\r\nexport const usePostPersistence = () => {\r\n  const [localPosts, setLocalPosts] = useState<Post[]>([]);\r\n\r\n  // Load local posts on mount\r\n  useEffect(() => {\r\n    try {\r\n      const stored = localStorage.getItem(LOCAL_POSTS_KEY);\r\n      if (stored) {\r\n        const posts = JSON.parse(stored);\r\n        console.log('üîÑ usePostPersistence: Loaded local posts:', posts.length);\r\n        setLocalPosts(posts);\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå Error loading local posts:', error);\r\n      setLocalPosts([]);\r\n    }\r\n  }, []);\r\n\r\n  // Save a new post locally\r\n  const savePostLocally = (post: Post) => {\r\n    try {\r\n      console.log('üíæ usePostPersistence: Saving post locally:', post.id);\r\n      const updatedPosts = [post, ...localPosts.filter(p => p.id !== post.id)];\r\n      setLocalPosts(updatedPosts);\r\n      localStorage.setItem(LOCAL_POSTS_KEY, JSON.stringify(updatedPosts));\r\n      console.log('‚úÖ usePostPersistence: Post saved successfully');\r\n    } catch (error) {\r\n      console.error('‚ùå Error saving post locally:', error);\r\n    }\r\n  };\r\n\r\n  // Merge server posts with local posts\r\n  const mergeWithServerPosts = (serverPosts: Post[]): Post[] => {\r\n    try {\r\n      console.log('üîÑ usePostPersistence: Merging posts');\r\n      console.log('üíæ Local posts:', localPosts.length);\r\n      console.log('üåê Server posts:', serverPosts.length);\r\n\r\n      const merged = [...localPosts];\r\n      let addedFromServer = 0;\r\n\r\n      serverPosts.forEach(serverPost => {\r\n        const existsLocally = localPosts.some(localPost => {\r\n          const idMatch = localPost.id === serverPost.id;\r\n          const contentMatch = localPost.content === serverPost.content;\r\n          const timeMatch = Math.abs(\r\n            new Date(localPost.created_at).getTime() - \r\n            new Date(serverPost.created_at).getTime()\r\n          ) < 15000; // 15 second window\r\n\r\n          return idMatch || (contentMatch && timeMatch);\r\n        });\r\n\r\n        if (!existsLocally) {\r\n          merged.push(serverPost);\r\n          addedFromServer++;\r\n        }\r\n      });\r\n\r\n      // Sort by creation date (newest first)\r\n      merged.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());\r\n\r\n      console.log('‚úÖ usePostPersistence: Merged successfully:', merged.length, 'total posts');\r\n      console.log(`   - ${localPosts.length} local posts`);\r\n      console.log(`   - ${addedFromServer} added from server`);\r\n\r\n      // Clean up old local posts (older than 10 minutes)\r\n      const tenMinutesAgo = Date.now() - 10 * 60 * 1000;\r\n      const recentLocalPosts = localPosts.filter(post => \r\n        new Date(post.created_at).getTime() > tenMinutesAgo\r\n      );\r\n\r\n      if (recentLocalPosts.length !== localPosts.length) {\r\n        console.log('üßπ usePostPersistence: Cleaning up old local posts');\r\n        setLocalPosts(recentLocalPosts);\r\n        localStorage.setItem(LOCAL_POSTS_KEY, JSON.stringify(recentLocalPosts));\r\n      }\r\n\r\n      return merged;\r\n    } catch (error) {\r\n      console.error('‚ùå Error merging posts:', error);\r\n      return serverPosts;\r\n    }\r\n  };\r\n\r\n  // Clear all local posts\r\n  const clearLocalPosts = () => {\r\n    try {\r\n      console.log('üßπ usePostPersistence: Clearing all local posts');\r\n      setLocalPosts([]);\r\n      localStorage.removeItem(LOCAL_POSTS_KEY);\r\n    } catch (error) {\r\n      console.error('‚ùå Error clearing local posts:', error);\r\n    }\r\n  };\r\n\r\n  return {\r\n    localPosts,\r\n    savePostLocally,\r\n    mergeWithServerPosts,\r\n    clearLocalPosts\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}