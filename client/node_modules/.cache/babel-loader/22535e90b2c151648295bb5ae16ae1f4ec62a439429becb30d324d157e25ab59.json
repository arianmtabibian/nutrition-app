{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arian\\\\OneDrive\\\\Desktop\\\\Nutrition\\\\client\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { api } from '../services/api';\nimport { storeAuthData, getAuthData, clearAuthData } from '../utils/authPersistence';\nimport { clearOnboardingCompletion } from '../utils/onboardingUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  // Unused state variables removed\n\n  useEffect(() => {\n    const checkAuth = () => {\n      console.log('🛡️ BULLETPROOF AUTH - NEVER CLEAR DATA');\n      const authData = getAuthData();\n      if (authData && authData.user) {\n        console.log('✅ Using cached user data - NO SERVER VERIFICATION');\n        setUser(authData.user);\n        api.defaults.headers.common['Authorization'] = `Bearer ${authData.token}`;\n      } else {\n        console.log('❌ No cached data');\n        setUser(null);\n      }\n      setLoading(false);\n    };\n    checkAuth();\n\n    // Listen for logout events from API interceptor\n    const handleLogoutEvent = () => {\n      console.log('🔐 Logout event received from API interceptor');\n      // Clear user state immediately\n      setUser(null);\n      setLoading(false);\n\n      // Clear onboarding completion flag so user can go through onboarding again if they create a new account\n      clearOnboardingCompletion();\n\n      // The ProtectedRoute component will automatically redirect to /login\n      // when user becomes null, using React Router properly\n    };\n    window.addEventListener('auth-logout', handleLogoutEvent);\n    return () => {\n      window.removeEventListener('auth-logout', handleLogoutEvent);\n    };\n  }, []); // No dependencies needed for simple auth check\n\n  const login = async (email, password) => {\n    try {\n      console.log('🔐 Starting login process...');\n      console.log('🔐 API Base URL:', api.defaults.baseURL);\n      console.log('🔐 Network status:', navigator.onLine ? 'Online' : 'Offline');\n\n      // Skip health check if we've had recent timeouts to speed up login\n      const recentTimeouts = localStorage.getItem('auth_timeout_count');\n      const timeoutCount = recentTimeouts ? parseInt(recentTimeouts) : 0;\n      if (timeoutCount < 2) {\n        // Try to wake up the server first with a quick health check\n        try {\n          console.log('🔐 Checking server status...');\n          await api.get('/api/health', {\n            timeout: 3000\n          });\n          console.log('🔐 Server is responsive');\n        } catch (healthError) {\n          console.warn('🔐 Server health check failed, but continuing with login:', healthError);\n        }\n      } else {\n        console.log('🔐 Skipping health check due to recent timeouts');\n      }\n      const startTime = Date.now();\n      let response;\n      try {\n        // Primary attempt with axios - adjust timeout based on recent performance\n        const loginTimeout = timeoutCount >= 2 ? 10000 : 20000; // Shorter timeout if issues persist\n        console.log(`🔐 Using ${loginTimeout}ms timeout for login (timeout count: ${timeoutCount})`);\n        response = await api.post('/api/auth/login', {\n          email,\n          password\n        }, {\n          timeout: loginTimeout\n        });\n      } catch (axiosError) {\n        var _axiosError$message;\n        console.warn('🔐 Axios login failed:', axiosError);\n\n        // Check if it's a CORS error\n        if ((_axiosError$message = axiosError.message) !== null && _axiosError$message !== void 0 && _axiosError$message.includes('CORS') || axiosError.code === 'ERR_NETWORK') {\n          throw new Error('CORS_ERROR: Unable to connect to server. Please check your internet connection and try again.');\n        }\n\n        // Fallback with direct fetch for other errors\n        try {\n          console.log('🔐 Trying direct fetch as fallback...');\n          const fetchResponse = await fetch(`${api.defaults.baseURL}/api/auth/login`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              email,\n              password\n            }),\n            signal: AbortSignal.timeout(25000)\n          });\n          if (!fetchResponse.ok) {\n            throw new Error(`HTTP ${fetchResponse.status}: ${fetchResponse.statusText}`);\n          }\n          const data = await fetchResponse.json();\n          response = {\n            data\n          };\n        } catch (fetchError) {\n          var _fetchError$message;\n          if ((_fetchError$message = fetchError.message) !== null && _fetchError$message !== void 0 && _fetchError$message.includes('CORS')) {\n            throw new Error('CORS_ERROR: Server is not accepting requests from this domain. Please contact support.');\n          }\n          throw fetchError;\n        }\n      }\n      const endTime = Date.now();\n      console.log(`🔐 Login request completed in ${endTime - startTime}ms`);\n\n      // Reset timeout counter on successful login\n      localStorage.removeItem('auth_timeout_count');\n      const {\n        token,\n        user: userData\n      } = response.data;\n\n      // Store authentication data using the new persistence system\n      storeAuthData(token, userData);\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      setUser({\n        id: userData.id,\n        email: userData.email,\n        first_name: userData.first_name,\n        last_name: userData.last_name,\n        username: userData.username,\n        profile_picture: userData.profile_picture\n      });\n    } catch (error) {\n      var _error$response, _error$response2, _error$config, _error$message, _error$response3, _error$response4, _error$response5, _error$message2;\n      console.error('🔐 Login error:', error);\n      console.error('🔐 Error details:', {\n        message: error.message,\n        code: error.code,\n        status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n        data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data,\n        timeout: error.timeout,\n        config: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.timeout\n      });\n      if (error.code === 'ECONNABORTED' || (_error$message = error.message) !== null && _error$message !== void 0 && _error$message.includes('timeout')) {\n        var _error$config2;\n        // Try to provide more specific timeout information\n        const timeoutMsg = (_error$config2 = error.config) !== null && _error$config2 !== void 0 && _error$config2.timeout ? `Login timed out after ${error.config.timeout}ms. ` : 'Login timed out. ';\n        throw new Error(timeoutMsg + 'The server might be slow to respond. Please try again in a moment.');\n      } else if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 401) {\n        throw new Error('Invalid email or password.');\n      } else if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 429) {\n        throw new Error('Too many login attempts. Please try again later.');\n      } else if (((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status) >= 500) {\n        throw new Error('Server error. Please try again later.');\n      } else if (!navigator.onLine) {\n        throw new Error('No internet connection. Please check your network.');\n      } else if (error.code === 'NETWORK_ERROR' || (_error$message2 = error.message) !== null && _error$message2 !== void 0 && _error$message2.includes('Network Error')) {\n        throw new Error('Network connection failed. Please check your internet connection and try again.');\n      } else {\n        var _error$response6, _error$response6$data;\n        throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.error) || error.message || 'Login failed. Please try again.');\n      }\n    }\n  };\n  const register = async (email, password, first_name, last_name, username) => {\n    try {\n      console.log('🔐 Starting registration process for:', email);\n      console.log('🔐 Registration data:', {\n        email,\n        first_name,\n        last_name,\n        username\n      });\n      console.log('🔐 API Base URL:', api.defaults.baseURL);\n      console.log('🔐 Network status:', navigator.onLine ? 'Online' : 'Offline');\n\n      // Implement retry mechanism with exponential backoff\n      const maxRetries = 3;\n      let lastError = null;\n      for (let attempt = 1; attempt <= maxRetries; attempt++) {\n        try {\n          console.log(`🔐 Registration attempt ${attempt}/${maxRetries}...`);\n          const startTime = Date.now();\n          let response;\n\n          // Try axios first with progressive timeout\n          const timeout = Math.min(10000 + attempt * 5000, 25000); // 10s, 15s, 20s, max 25s\n          console.log(`🔐 Using ${timeout}ms timeout for attempt ${attempt}`);\n          try {\n            response = await api.post('/api/auth/register', {\n              email,\n              password,\n              first_name,\n              last_name,\n              username\n            }, {\n              timeout: timeout\n            });\n          } catch (axiosError) {\n            var _axiosError$message2;\n            console.warn(`🔐 Axios registration attempt ${attempt} failed:`, axiosError.message);\n\n            // Check if it's a CORS error\n            if ((_axiosError$message2 = axiosError.message) !== null && _axiosError$message2 !== void 0 && _axiosError$message2.includes('CORS') || axiosError.code === 'ERR_NETWORK') {\n              throw new Error('CORS_ERROR: Unable to connect to server. Please check your internet connection and try again.');\n            }\n\n            // Fallback with direct fetch for other errors\n            console.log(`🔐 Trying direct fetch fallback for attempt ${attempt}...`);\n            const fetchResponse = await fetch(`${api.defaults.baseURL}/api/auth/register`, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                email,\n                password,\n                first_name,\n                last_name,\n                username\n              }),\n              signal: AbortSignal.timeout(timeout + 5000) // Add 5s buffer for fetch\n            });\n            if (!fetchResponse.ok) {\n              const errorText = await fetchResponse.text();\n              let errorData;\n              try {\n                errorData = JSON.parse(errorText);\n              } catch {\n                errorData = {\n                  error: errorText\n                };\n              }\n              throw new Error(`HTTP ${fetchResponse.status}: ${errorData.error || fetchResponse.statusText}`);\n            }\n            const data = await fetchResponse.json();\n            response = {\n              data\n            };\n          }\n          const endTime = Date.now();\n          console.log(`🔐 Registration attempt ${attempt} completed in ${endTime - startTime}ms`);\n\n          // If we get here, registration was successful\n          console.log('🔐 Registration response:', response.data);\n          const {\n            token,\n            user: userData\n          } = response.data;\n          if (!token || !userData) {\n            console.error('🔐 Invalid registration response - missing token or user data');\n            throw new Error('Invalid response from server');\n          }\n          console.log('🔐 Storing auth data for new user:', userData);\n\n          // Store authentication data using the new persistence system\n          storeAuthData(token, userData);\n          api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n          setUser({\n            id: userData.id,\n            email: userData.email,\n            first_name: userData.first_name,\n            last_name: userData.last_name,\n            username: userData.username,\n            profile_picture: userData.profile_picture\n          });\n          console.log('🔐 Registration successful! User logged in:', userData.email);\n          return; // Success - exit the retry loop\n        } catch (attemptError) {\n          var _attemptError$message, _attemptError$respons, _attemptError$respons2;\n          lastError = attemptError;\n          console.error(`🔐 Registration attempt ${attempt} failed:`, attemptError.message);\n\n          // Don't retry for certain errors\n          if ((_attemptError$message = attemptError.message) !== null && _attemptError$message !== void 0 && _attemptError$message.includes('CORS_ERROR') || ((_attemptError$respons = attemptError.response) === null || _attemptError$respons === void 0 ? void 0 : _attemptError$respons.status) === 400 || ((_attemptError$respons2 = attemptError.response) === null || _attemptError$respons2 === void 0 ? void 0 : _attemptError$respons2.status) === 409) {\n            throw attemptError; // Don't retry for client errors\n          }\n\n          // If this is the last attempt, throw the error\n          if (attempt === maxRetries) {\n            break;\n          }\n\n          // Wait before retrying (exponential backoff)\n          const delay = Math.min(1000 * Math.pow(2, attempt - 1), 5000); // 1s, 2s, 4s, max 5s\n          console.log(`🔐 Waiting ${delay}ms before retry...`);\n          await new Promise(resolve => setTimeout(resolve, delay));\n        }\n      }\n\n      // If we get here, all retries failed\n      throw lastError;\n    } catch (error) {\n      var _error$response7, _error$response8, _error$config3, _error$message3, _error$message4, _error$response9, _error$response1, _error$response10, _error$message5, _error$message6;\n      console.error('🔐 Registration error after all retries:', error);\n      console.error('🔐 Error details:', {\n        message: error.message,\n        code: error.code,\n        status: (_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.status,\n        data: (_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data,\n        timeout: error.timeout,\n        config: (_error$config3 = error.config) === null || _error$config3 === void 0 ? void 0 : _error$config3.timeout\n      });\n      if (error.code === 'ECONNABORTED' || (_error$message3 = error.message) !== null && _error$message3 !== void 0 && _error$message3.includes('timeout') || (_error$message4 = error.message) !== null && _error$message4 !== void 0 && _error$message4.includes('timed out')) {\n        throw new Error('Registration timed out after multiple attempts. The server might be slow to respond. Please try again in a moment.');\n      } else if (((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.status) === 400) {\n        var _error$response0, _error$response0$data;\n        throw new Error(((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : (_error$response0$data = _error$response0.data) === null || _error$response0$data === void 0 ? void 0 : _error$response0$data.error) || 'Invalid registration data. Please check your information.');\n      } else if (((_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : _error$response1.status) === 409) {\n        throw new Error('An account with this email already exists. Please try logging in instead.');\n      } else if (((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : _error$response10.status) >= 500) {\n        throw new Error('Server error. Please try again later.');\n      } else if (!navigator.onLine) {\n        throw new Error('No internet connection. Please check your network.');\n      } else if (error.code === 'NETWORK_ERROR' || (_error$message5 = error.message) !== null && _error$message5 !== void 0 && _error$message5.includes('Network Error')) {\n        throw new Error('Network connection failed. Please check your internet connection and try again.');\n      } else if ((_error$message6 = error.message) !== null && _error$message6 !== void 0 && _error$message6.includes('CORS_ERROR')) {\n        throw new Error('Server connection issue. Please check your internet connection and try again.');\n      } else {\n        var _error$response11, _error$response11$dat;\n        throw new Error(((_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : (_error$response11$dat = _error$response11.data) === null || _error$response11$dat === void 0 ? void 0 : _error$response11$dat.error) || error.message || 'Registration failed. Please try again.');\n      }\n    }\n  };\n  const logout = () => {\n    // Clear all authentication data using the new persistence system\n    clearAuthData();\n    delete api.defaults.headers.common['Authorization'];\n\n    // Clear onboarding completion flag so user can go through onboarding again if they create a new account\n    clearOnboardingCompletion();\n    setUser(null);\n  };\n  const updateUser = userData => {\n    setUser(prev => prev ? {\n      ...prev,\n      ...userData\n    } : null);\n  };\n  const value = {\n    user,\n    loading,\n    login,\n    register,\n    logout,\n    updateUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 386,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","api","storeAuthData","getAuthData","clearAuthData","clearOnboardingCompletion","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","checkAuth","console","log","authData","defaults","headers","common","token","handleLogoutEvent","window","addEventListener","removeEventListener","login","email","password","baseURL","navigator","onLine","recentTimeouts","localStorage","getItem","timeoutCount","parseInt","get","timeout","healthError","warn","startTime","Date","now","response","loginTimeout","post","axiosError","_axiosError$message","message","includes","code","fetchResponse","fetch","method","body","JSON","stringify","signal","AbortSignal","ok","status","statusText","data","json","fetchError","_fetchError$message","endTime","removeItem","userData","id","first_name","last_name","username","profile_picture","error","_error$response","_error$response2","_error$config","_error$message","_error$response3","_error$response4","_error$response5","_error$message2","config","_error$config2","timeoutMsg","_error$response6","_error$response6$data","register","maxRetries","lastError","attempt","Math","min","_axiosError$message2","errorText","text","errorData","parse","attemptError","_attemptError$message","_attemptError$respons","_attemptError$respons2","delay","pow","Promise","resolve","setTimeout","_error$response7","_error$response8","_error$config3","_error$message3","_error$message4","_error$response9","_error$response1","_error$response10","_error$message5","_error$message6","_error$response0","_error$response0$data","_error$response11","_error$response11$dat","logout","updateUser","prev","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/arian/OneDrive/Desktop/Nutrition/client/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { api } from '../services/api';\r\nimport { storeAuthData, getAuthData, clearAuthData } from '../utils/authPersistence';\r\nimport { clearOnboardingCompletion } from '../utils/onboardingUtils';\r\n\r\ninterface User {\r\n  id: number;\r\n  email: string;\r\n  first_name: string;\r\n  last_name: string;\r\n  username: string;\r\n  profile_picture?: string;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  loading: boolean;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  register: (email: string, password: string, first_name: string, last_name: string, username: string) => Promise<void>;\r\n  logout: () => void;\r\n  updateUser: (userData: Partial<User>) => void;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  // Unused state variables removed\r\n\r\n  useEffect(() => {\r\n    const checkAuth = () => {\r\n      console.log('🛡️ BULLETPROOF AUTH - NEVER CLEAR DATA');\r\n      \r\n      const authData = getAuthData();\r\n      \r\n      if (authData && authData.user) {\r\n        console.log('✅ Using cached user data - NO SERVER VERIFICATION');\r\n        setUser(authData.user);\r\n        api.defaults.headers.common['Authorization'] = `Bearer ${authData.token}`;\r\n      } else {\r\n        console.log('❌ No cached data');\r\n        setUser(null);\r\n      }\r\n      \r\n      setLoading(false);\r\n    };\r\n\r\n    checkAuth();\r\n\r\n    // Listen for logout events from API interceptor\r\n    const handleLogoutEvent = () => {\r\n      console.log('🔐 Logout event received from API interceptor');\r\n      // Clear user state immediately\r\n      setUser(null);\r\n      setLoading(false);\r\n      \r\n      // Clear onboarding completion flag so user can go through onboarding again if they create a new account\r\n      clearOnboardingCompletion();\r\n      \r\n      // The ProtectedRoute component will automatically redirect to /login\r\n      // when user becomes null, using React Router properly\r\n    };\r\n\r\n    window.addEventListener('auth-logout', handleLogoutEvent);\r\n\r\n    return () => {\r\n      window.removeEventListener('auth-logout', handleLogoutEvent);\r\n    };\r\n  }, []); // No dependencies needed for simple auth check\r\n\r\n  const login = async (email: string, password: string) => {\r\n    try {\r\n      console.log('🔐 Starting login process...');\r\n      console.log('🔐 API Base URL:', api.defaults.baseURL);\r\n      console.log('🔐 Network status:', navigator.onLine ? 'Online' : 'Offline');\r\n      \r\n      // Skip health check if we've had recent timeouts to speed up login\r\n      const recentTimeouts = localStorage.getItem('auth_timeout_count');\r\n      const timeoutCount = recentTimeouts ? parseInt(recentTimeouts) : 0;\r\n      \r\n      if (timeoutCount < 2) {\r\n        // Try to wake up the server first with a quick health check\r\n        try {\r\n          console.log('🔐 Checking server status...');\r\n          await api.get('/api/health', { timeout: 3000 });\r\n          console.log('🔐 Server is responsive');\r\n        } catch (healthError) {\r\n          console.warn('🔐 Server health check failed, but continuing with login:', healthError);\r\n        }\r\n      } else {\r\n        console.log('🔐 Skipping health check due to recent timeouts');\r\n      }\r\n      \r\n      const startTime = Date.now();\r\n      let response;\r\n      \r\n      try {\r\n        // Primary attempt with axios - adjust timeout based on recent performance\r\n        const loginTimeout = timeoutCount >= 2 ? 10000 : 20000; // Shorter timeout if issues persist\r\n        console.log(`🔐 Using ${loginTimeout}ms timeout for login (timeout count: ${timeoutCount})`);\r\n        \r\n        response = await api.post('/api/auth/login', { \r\n          email, \r\n          password \r\n        }, {\r\n          timeout: loginTimeout\r\n        });\r\n      } catch (axiosError: any) {\r\n        console.warn('🔐 Axios login failed:', axiosError);\r\n        \r\n        // Check if it's a CORS error\r\n        if (axiosError.message?.includes('CORS') || axiosError.code === 'ERR_NETWORK') {\r\n          throw new Error('CORS_ERROR: Unable to connect to server. Please check your internet connection and try again.');\r\n        }\r\n        \r\n        // Fallback with direct fetch for other errors\r\n        try {\r\n          console.log('🔐 Trying direct fetch as fallback...');\r\n          const fetchResponse = await fetch(`${api.defaults.baseURL}/api/auth/login`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ email, password }),\r\n            signal: AbortSignal.timeout(25000)\r\n          });\r\n          \r\n          if (!fetchResponse.ok) {\r\n            throw new Error(`HTTP ${fetchResponse.status}: ${fetchResponse.statusText}`);\r\n          }\r\n          \r\n          const data = await fetchResponse.json();\r\n          response = { data };\r\n        } catch (fetchError: any) {\r\n          if (fetchError.message?.includes('CORS')) {\r\n            throw new Error('CORS_ERROR: Server is not accepting requests from this domain. Please contact support.');\r\n          }\r\n          throw fetchError;\r\n        }\r\n      }\r\n      \r\n      const endTime = Date.now();\r\n      console.log(`🔐 Login request completed in ${endTime - startTime}ms`);\r\n      \r\n      // Reset timeout counter on successful login\r\n      localStorage.removeItem('auth_timeout_count');\r\n      \r\n      const { token, user: userData } = response.data;\r\n      \r\n      // Store authentication data using the new persistence system\r\n      storeAuthData(token, userData);\r\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      \r\n      setUser({\r\n        id: userData.id,\r\n        email: userData.email,\r\n        first_name: userData.first_name,\r\n        last_name: userData.last_name,\r\n        username: userData.username,\r\n        profile_picture: userData.profile_picture\r\n      });\r\n    } catch (error: any) {\r\n      console.error('🔐 Login error:', error);\r\n      console.error('🔐 Error details:', {\r\n        message: error.message,\r\n        code: error.code,\r\n        status: error.response?.status,\r\n        data: error.response?.data,\r\n        timeout: error.timeout,\r\n        config: error.config?.timeout\r\n      });\r\n      \r\n      if (error.code === 'ECONNABORTED' || error.message?.includes('timeout')) {\r\n        // Try to provide more specific timeout information\r\n        const timeoutMsg = error.config?.timeout ? \r\n          `Login timed out after ${error.config.timeout}ms. ` : 'Login timed out. ';\r\n        throw new Error(timeoutMsg + 'The server might be slow to respond. Please try again in a moment.');\r\n      } else if (error.response?.status === 401) {\r\n        throw new Error('Invalid email or password.');\r\n      } else if (error.response?.status === 429) {\r\n        throw new Error('Too many login attempts. Please try again later.');\r\n      } else if (error.response?.status >= 500) {\r\n        throw new Error('Server error. Please try again later.');\r\n      } else if (!navigator.onLine) {\r\n        throw new Error('No internet connection. Please check your network.');\r\n      } else if (error.code === 'NETWORK_ERROR' || error.message?.includes('Network Error')) {\r\n        throw new Error('Network connection failed. Please check your internet connection and try again.');\r\n      } else {\r\n        throw new Error(error.response?.data?.error || error.message || 'Login failed. Please try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const register = async (email: string, password: string, first_name: string, last_name: string, username: string) => {\r\n    try {\r\n      console.log('🔐 Starting registration process for:', email);\r\n      console.log('🔐 Registration data:', { email, first_name, last_name, username });\r\n      console.log('🔐 API Base URL:', api.defaults.baseURL);\r\n      console.log('🔐 Network status:', navigator.onLine ? 'Online' : 'Offline');\r\n      \r\n      // Implement retry mechanism with exponential backoff\r\n      const maxRetries = 3;\r\n      let lastError: any = null;\r\n      \r\n      for (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n        try {\r\n          console.log(`🔐 Registration attempt ${attempt}/${maxRetries}...`);\r\n          \r\n          const startTime = Date.now();\r\n          let response;\r\n          \r\n          // Try axios first with progressive timeout\r\n          const timeout = Math.min(10000 + (attempt * 5000), 25000); // 10s, 15s, 20s, max 25s\r\n          console.log(`🔐 Using ${timeout}ms timeout for attempt ${attempt}`);\r\n          \r\n          try {\r\n            response = await api.post('/api/auth/register', { \r\n              email, \r\n              password, \r\n              first_name, \r\n              last_name, \r\n              username \r\n            }, {\r\n              timeout: timeout\r\n            });\r\n          } catch (axiosError: any) {\r\n            console.warn(`🔐 Axios registration attempt ${attempt} failed:`, axiosError.message);\r\n            \r\n            // Check if it's a CORS error\r\n            if (axiosError.message?.includes('CORS') || axiosError.code === 'ERR_NETWORK') {\r\n              throw new Error('CORS_ERROR: Unable to connect to server. Please check your internet connection and try again.');\r\n            }\r\n            \r\n            // Fallback with direct fetch for other errors\r\n            console.log(`🔐 Trying direct fetch fallback for attempt ${attempt}...`);\r\n            const fetchResponse = await fetch(`${api.defaults.baseURL}/api/auth/register`, {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n              },\r\n              body: JSON.stringify({ email, password, first_name, last_name, username }),\r\n              signal: AbortSignal.timeout(timeout + 5000) // Add 5s buffer for fetch\r\n            });\r\n            \r\n            if (!fetchResponse.ok) {\r\n              const errorText = await fetchResponse.text();\r\n              let errorData;\r\n              try {\r\n                errorData = JSON.parse(errorText);\r\n              } catch {\r\n                errorData = { error: errorText };\r\n              }\r\n              throw new Error(`HTTP ${fetchResponse.status}: ${errorData.error || fetchResponse.statusText}`);\r\n            }\r\n            \r\n            const data = await fetchResponse.json();\r\n            response = { data };\r\n          }\r\n          \r\n          const endTime = Date.now();\r\n          console.log(`🔐 Registration attempt ${attempt} completed in ${endTime - startTime}ms`);\r\n          \r\n          // If we get here, registration was successful\r\n          console.log('🔐 Registration response:', response.data);\r\n          \r\n          const { token, user: userData } = response.data;\r\n          \r\n          if (!token || !userData) {\r\n            console.error('🔐 Invalid registration response - missing token or user data');\r\n            throw new Error('Invalid response from server');\r\n          }\r\n          \r\n          console.log('🔐 Storing auth data for new user:', userData);\r\n          \r\n          // Store authentication data using the new persistence system\r\n          storeAuthData(token, userData);\r\n          api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n          \r\n          setUser({\r\n            id: userData.id,\r\n            email: userData.email,\r\n            first_name: userData.first_name,\r\n            last_name: userData.last_name,\r\n            username: userData.username,\r\n            profile_picture: userData.profile_picture\r\n          });\r\n          \r\n          console.log('🔐 Registration successful! User logged in:', userData.email);\r\n          return; // Success - exit the retry loop\r\n          \r\n        } catch (attemptError: any) {\r\n          lastError = attemptError;\r\n          console.error(`🔐 Registration attempt ${attempt} failed:`, attemptError.message);\r\n          \r\n          // Don't retry for certain errors\r\n          if (attemptError.message?.includes('CORS_ERROR') || \r\n              attemptError.response?.status === 400 || \r\n              attemptError.response?.status === 409) {\r\n            throw attemptError; // Don't retry for client errors\r\n          }\r\n          \r\n          // If this is the last attempt, throw the error\r\n          if (attempt === maxRetries) {\r\n            break;\r\n          }\r\n          \r\n          // Wait before retrying (exponential backoff)\r\n          const delay = Math.min(1000 * Math.pow(2, attempt - 1), 5000); // 1s, 2s, 4s, max 5s\r\n          console.log(`🔐 Waiting ${delay}ms before retry...`);\r\n          await new Promise(resolve => setTimeout(resolve, delay));\r\n        }\r\n      }\r\n      \r\n      // If we get here, all retries failed\r\n      throw lastError;\r\n      \r\n    } catch (error: any) {\r\n      console.error('🔐 Registration error after all retries:', error);\r\n      console.error('🔐 Error details:', {\r\n        message: error.message,\r\n        code: error.code,\r\n        status: error.response?.status,\r\n        data: error.response?.data,\r\n        timeout: error.timeout,\r\n        config: error.config?.timeout\r\n      });\r\n      \r\n      if (error.code === 'ECONNABORTED' || error.message?.includes('timeout') || error.message?.includes('timed out')) {\r\n        throw new Error('Registration timed out after multiple attempts. The server might be slow to respond. Please try again in a moment.');\r\n      } else if (error.response?.status === 400) {\r\n        throw new Error(error.response?.data?.error || 'Invalid registration data. Please check your information.');\r\n      } else if (error.response?.status === 409) {\r\n        throw new Error('An account with this email already exists. Please try logging in instead.');\r\n      } else if (error.response?.status >= 500) {\r\n        throw new Error('Server error. Please try again later.');\r\n      } else if (!navigator.onLine) {\r\n        throw new Error('No internet connection. Please check your network.');\r\n      } else if (error.code === 'NETWORK_ERROR' || error.message?.includes('Network Error')) {\r\n        throw new Error('Network connection failed. Please check your internet connection and try again.');\r\n      } else if (error.message?.includes('CORS_ERROR')) {\r\n        throw new Error('Server connection issue. Please check your internet connection and try again.');\r\n      } else {\r\n        throw new Error(error.response?.data?.error || error.message || 'Registration failed. Please try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    // Clear all authentication data using the new persistence system\r\n    clearAuthData();\r\n    delete api.defaults.headers.common['Authorization'];\r\n    \r\n    // Clear onboarding completion flag so user can go through onboarding again if they create a new account\r\n    clearOnboardingCompletion();\r\n    \r\n    setUser(null);\r\n  };\r\n\r\n  const updateUser = (userData: Partial<User>) => {\r\n    setUser(prev => prev ? { ...prev, ...userData } : null);\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    loading,\r\n    login,\r\n    register,\r\n    logout,\r\n    updateUser\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}