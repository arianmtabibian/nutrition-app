{"ast":null,"code":"import _objectSpread from\"C:/Users/arian/OneDrive/Desktop/Nutrition/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState,useEffect}from'react';import{api}from'../services/api';import{storeAuthData,getAuthData,clearAuthData,hasValidAuth}from'../utils/authPersistence';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{// Check if user is already logged in using the new persistence system\nconst authData=getAuthData();const currentDomain=window.location.origin;console.log('Auth check - Domain:',currentDomain);console.log('Auth data exists:',!!authData);if(authData&&hasValidAuth()){console.log('Found valid auth data, verifying with backend...');api.defaults.headers.common['Authorization']=\"Bearer \".concat(authData.token);// Verify token and get user info from the auth verify endpoint\napi.get('/api/auth/verify').then(response=>{console.log('Verify response in AuthContext:',response.data);if(response.data.user){setUser(response.data.user);// Update auth data with current domain\nstoreAuthData(authData.token,response.data.user);console.log('User logged in successfully on domain:',currentDomain);}}).catch(error=>{console.error('Error verifying user:',error);// Token is invalid, clear all auth data\nclearAuthData();delete api.defaults.headers.common['Authorization'];console.log('Token cleared due to verification failure');}).finally(()=>{setLoading(false);});}else{console.log('No valid auth data found, user not logged in');setLoading(false);}},[]);const login=async(email,password)=>{try{const response=await api.post('/api/auth/login',{email,password});const{token,user:userData}=response.data;// Store authentication data using the new persistence system\nstoreAuthData(token,userData);api.defaults.headers.common['Authorization']=\"Bearer \".concat(token);setUser({id:userData.id,email:userData.email,first_name:userData.first_name,last_name:userData.last_name,username:userData.username,profile_picture:userData.profile_picture});}catch(error){var _error$response,_error$response$data;throw new Error(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.error)||'Login failed');}};const register=async(email,password,first_name,last_name,username)=>{try{const response=await api.post('/api/auth/register',{email,password,first_name,last_name,username});const{token,user:userData}=response.data;// Store authentication data using the new persistence system\nstoreAuthData(token,userData);api.defaults.headers.common['Authorization']=\"Bearer \".concat(token);setUser({id:userData.id,email:userData.email,first_name:userData.first_name,last_name:userData.last_name,username:userData.username,profile_picture:userData.profile_picture});}catch(error){var _error$response2,_error$response2$data;throw new Error(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.error)||'Registration failed');}};const logout=()=>{// Clear all authentication data using the new persistence system\nclearAuthData();delete api.defaults.headers.common['Authorization'];setUser(null);};const updateUser=userData=>{setUser(prev=>prev?_objectSpread(_objectSpread({},prev),userData):null);};const value={user,loading,login,register,logout,updateUser};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","api","storeAuthData","getAuthData","clearAuthData","hasValidAuth","jsx","_jsx","AuthContext","undefined","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","loading","setLoading","authData","currentDomain","window","location","origin","console","log","defaults","headers","common","concat","token","get","then","response","data","catch","error","finally","login","email","password","post","userData","id","first_name","last_name","username","profile_picture","_error$response","_error$response$data","register","_error$response2","_error$response2$data","logout","updateUser","prev","_objectSpread","value","Provider"],"sources":["C:/Users/arian/OneDrive/Desktop/Nutrition/client/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { api } from '../services/api';\nimport { storeAuthData, getAuthData, clearAuthData, hasValidAuth } from '../utils/authPersistence';\n\ninterface User {\n  id: number;\n  email: string;\n  first_name: string;\n  last_name: string;\n  username: string;\n  profile_picture?: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string, first_name: string, last_name: string, username: string) => Promise<void>;\n  logout: () => void;\n  updateUser: (userData: Partial<User>) => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if user is already logged in using the new persistence system\n    const authData = getAuthData();\n    const currentDomain = window.location.origin;\n    \n    console.log('Auth check - Domain:', currentDomain);\n    console.log('Auth data exists:', !!authData);\n    \n    if (authData && hasValidAuth()) {\n      console.log('Found valid auth data, verifying with backend...');\n      api.defaults.headers.common['Authorization'] = `Bearer ${authData.token}`;\n      \n      // Verify token and get user info from the auth verify endpoint\n      api.get('/api/auth/verify')\n        .then(response => {\n          console.log('Verify response in AuthContext:', response.data);\n          if (response.data.user) {\n            setUser(response.data.user);\n            // Update auth data with current domain\n            storeAuthData(authData.token, response.data.user);\n            console.log('User logged in successfully on domain:', currentDomain);\n          }\n        })\n        .catch((error) => {\n          console.error('Error verifying user:', error);\n          // Token is invalid, clear all auth data\n          clearAuthData();\n          delete api.defaults.headers.common['Authorization'];\n          console.log('Token cleared due to verification failure');\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    } else {\n      console.log('No valid auth data found, user not logged in');\n      setLoading(false);\n    }\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    try {\n      const response = await api.post('/api/auth/login', { email, password });\n      const { token, user: userData } = response.data;\n      \n      // Store authentication data using the new persistence system\n      storeAuthData(token, userData);\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      \n      setUser({\n        id: userData.id,\n        email: userData.email,\n        first_name: userData.first_name,\n        last_name: userData.last_name,\n        username: userData.username,\n        profile_picture: userData.profile_picture\n      });\n    } catch (error: any) {\n      throw new Error(error.response?.data?.error || 'Login failed');\n    }\n  };\n\n  const register = async (email: string, password: string, first_name: string, last_name: string, username: string) => {\n    try {\n      const response = await api.post('/api/auth/register', { email, password, first_name, last_name, username });\n      const { token, user: userData } = response.data;\n      \n      // Store authentication data using the new persistence system\n      storeAuthData(token, userData);\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      \n      setUser({\n        id: userData.id,\n        email: userData.email,\n        first_name: userData.first_name,\n        last_name: userData.last_name,\n        username: userData.username,\n        profile_picture: userData.profile_picture\n      });\n    } catch (error: any) {\n      throw new Error(error.response?.data?.error || 'Registration failed');\n    }\n  };\n\n  const logout = () => {\n    // Clear all authentication data using the new persistence system\n    clearAuthData();\n    delete api.defaults.headers.common['Authorization'];\n    setUser(null);\n  };\n\n  const updateUser = (userData: Partial<User>) => {\n    setUser(prev => prev ? { ...prev, ...userData } : null);\n  };\n\n  const value: AuthContextType = {\n    user,\n    loading,\n    login,\n    register,\n    logout,\n    updateUser\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}