{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\n\n// Global protection hook to prevent any navigation to onboarding for existing users\nexport const useOnboardingProtection = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const {\n    user\n  } = useAuth();\n  useEffect(() => {\n    // Only run this protection if user is authenticated\n    if (!user) return;\n\n    // Check if user is trying to access onboarding\n    if (location.pathname === '/onboarding') {\n      const hasAccessedApp = localStorage.getItem('hasAccessedApp');\n      if (hasAccessedApp === 'true') {\n        console.log('Global navigation guard: Preventing onboarding access for existing user');\n        navigate('/dashboard', {\n          replace: true\n        });\n        return;\n      }\n    }\n\n    // Mark that user has accessed the app (for future protection)\n    if (location.pathname.startsWith('/dashboard')) {\n      localStorage.setItem('hasAccessedApp', 'true');\n      localStorage.setItem('lastAccess', new Date().toISOString());\n    }\n  }, [location.pathname, user, navigate]);\n};\n_s(useOnboardingProtection, \"k1GbrS+9ZMLa7IuJBQpaSG++EKw=\", false, function () {\n  return [useNavigate, useLocation, useAuth];\n});","map":{"version":3,"names":["useEffect","useNavigate","useLocation","useAuth","useOnboardingProtection","_s","navigate","location","user","pathname","hasAccessedApp","localStorage","getItem","console","log","replace","startsWith","setItem","Date","toISOString"],"sources":["C:/Users/arian/OneDrive/Desktop/Nutrition/client/src/hooks/useOnboardingProtection.ts"],"sourcesContent":["import { useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../contexts/AuthContext';\r\n\r\n// Global protection hook to prevent any navigation to onboarding for existing users\r\nexport const useOnboardingProtection = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const { user } = useAuth();\r\n\r\n  useEffect(() => {\r\n    // Only run this protection if user is authenticated\r\n    if (!user) return;\r\n\r\n    // Check if user is trying to access onboarding\r\n    if (location.pathname === '/onboarding') {\r\n      const hasAccessedApp = localStorage.getItem('hasAccessedApp');\r\n      \r\n      if (hasAccessedApp === 'true') {\r\n        console.log('Global navigation guard: Preventing onboarding access for existing user');\r\n        navigate('/dashboard', { replace: true });\r\n        return;\r\n      }\r\n    }\r\n    \r\n    // Mark that user has accessed the app (for future protection)\r\n    if (location.pathname.startsWith('/dashboard')) {\r\n      localStorage.setItem('hasAccessedApp', 'true');\r\n      localStorage.setItem('lastAccess', new Date().toISOString());\r\n    }\r\n  }, [location.pathname, user, navigate]);\r\n};\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,SAASC,OAAO,QAAQ,yBAAyB;;AAEjD;AACA,OAAO,MAAMC,uBAAuB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3C,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAMM,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEM;EAAK,CAAC,GAAGL,OAAO,CAAC,CAAC;EAE1BH,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAACQ,IAAI,EAAE;;IAEX;IACA,IAAID,QAAQ,CAACE,QAAQ,KAAK,aAAa,EAAE;MACvC,MAAMC,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;MAE7D,IAAIF,cAAc,KAAK,MAAM,EAAE;QAC7BG,OAAO,CAACC,GAAG,CAAC,yEAAyE,CAAC;QACtFR,QAAQ,CAAC,YAAY,EAAE;UAAES,OAAO,EAAE;QAAK,CAAC,CAAC;QACzC;MACF;IACF;;IAEA;IACA,IAAIR,QAAQ,CAACE,QAAQ,CAACO,UAAU,CAAC,YAAY,CAAC,EAAE;MAC9CL,YAAY,CAACM,OAAO,CAAC,gBAAgB,EAAE,MAAM,CAAC;MAC9CN,YAAY,CAACM,OAAO,CAAC,YAAY,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC;IAC9D;EACF,CAAC,EAAE,CAACZ,QAAQ,CAACE,QAAQ,EAAED,IAAI,EAAEF,QAAQ,CAAC,CAAC;AACzC,CAAC;AAACD,EAAA,CA1BWD,uBAAuB;EAAA,QACjBH,WAAW,EACXC,WAAW,EACXC,OAAO;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}