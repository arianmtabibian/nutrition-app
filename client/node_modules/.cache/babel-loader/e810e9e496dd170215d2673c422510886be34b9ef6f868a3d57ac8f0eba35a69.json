{"ast":null,"code":"/**\r\n * Generate a short summary (5 words or less) from a meal description\r\n */export const generateMealSummary=description=>{if(!description||description.trim()===''){return'Untitled Meal';}// Clean the description - remove extra spaces, punctuation at the end\nconst cleanDescription=description.trim().replace(/[.,!?;]+$/,'');// Common words to remove for more concise summaries\nconst fillerWords=['with','and','or','the','a','an','of','in','on','at','to','for','from','by','about','into','through','during','before','after','above','below','up','down','out','off','over','under','again','further','then','once','some','very','really','quite','rather','pretty','more','most','less','least','much','many','few','little','big','small','large','huge','tiny'];// Split into words and filter\nconst words=cleanDescription.toLowerCase().split(/\\s+/).filter(word=>word.length>0);// If it's already 5 words or less, return as is (but capitalized)\nif(words.length<=5){return words.map(word=>word.charAt(0).toUpperCase()+word.slice(1)).join(' ');}// Extract important words (non-filler words first)\nconst importantWords=words.filter(word=>!fillerWords.includes(word));// If we have 5 or fewer important words, use those\nif(importantWords.length<=5){return importantWords.slice(0,5).map(word=>word.charAt(0).toUpperCase()+word.slice(1)).join(' ');}// Otherwise, take first 5 important words\nconst summary=importantWords.slice(0,5).map(word=>word.charAt(0).toUpperCase()+word.slice(1)).join(' ');return summary;};/**\r\n * Generate an even shorter summary (3 words or less) for compact displays\r\n */export const generateShortMealSummary=description=>{if(!description||description.trim()===''){return'Meal';}const cleanDescription=description.trim().replace(/[.,!?;]+$/,'');// For very short summaries, focus on the main food items\nconst words=cleanDescription.toLowerCase().split(/\\s+/).filter(word=>word.length>2);// Remove very short words\n// Common food-related words that are important to keep\nconst foodWords=['chicken','beef','pork','fish','salmon','tuna','turkey','lamb','rice','pasta','bread','quinoa','oats','cereal','salad','soup','sandwich','burger','pizza','taco','wrap','eggs','cheese','milk','yogurt','apple','banana','orange','berry','fruit','broccoli','spinach','carrot','potato','tomato','vegetable','grilled','baked','fried','roasted','steamed','boiled'];// Prioritize food words\nconst priorityWords=words.filter(word=>foodWords.includes(word));const remainingWords=words.filter(word=>!foodWords.includes(word));// Combine priority words first, then others\nconst selectedWords=[...priorityWords,...remainingWords].slice(0,3);if(selectedWords.length===0){return'Meal';}return selectedWords.map(word=>word.charAt(0).toUpperCase()+word.slice(1)).join(' ');};","map":{"version":3,"names":["generateMealSummary","description","trim","cleanDescription","replace","fillerWords","words","toLowerCase","split","filter","word","length","map","charAt","toUpperCase","slice","join","importantWords","includes","summary","generateShortMealSummary","foodWords","priorityWords","remainingWords","selectedWords"],"sources":["C:/Users/arian/OneDrive/Desktop/Nutrition/client/src/utils/mealSummary.ts"],"sourcesContent":["/**\r\n * Generate a short summary (5 words or less) from a meal description\r\n */\r\nexport const generateMealSummary = (description: string): string => {\r\n  if (!description || description.trim() === '') {\r\n    return 'Untitled Meal';\r\n  }\r\n\r\n  // Clean the description - remove extra spaces, punctuation at the end\r\n  const cleanDescription = description.trim().replace(/[.,!?;]+$/, '');\r\n  \r\n  // Common words to remove for more concise summaries\r\n  const fillerWords = [\r\n    'with', 'and', 'or', 'the', 'a', 'an', 'of', 'in', 'on', 'at', 'to', 'for',\r\n    'from', 'by', 'about', 'into', 'through', 'during', 'before', 'after',\r\n    'above', 'below', 'up', 'down', 'out', 'off', 'over', 'under', 'again',\r\n    'further', 'then', 'once', 'some', 'very', 'really', 'quite', 'rather',\r\n    'pretty', 'more', 'most', 'less', 'least', 'much', 'many', 'few', 'little',\r\n    'big', 'small', 'large', 'huge', 'tiny'\r\n  ];\r\n\r\n  // Split into words and filter\r\n  const words = cleanDescription\r\n    .toLowerCase()\r\n    .split(/\\s+/)\r\n    .filter(word => word.length > 0);\r\n\r\n  // If it's already 5 words or less, return as is (but capitalized)\r\n  if (words.length <= 5) {\r\n    return words\r\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n      .join(' ');\r\n  }\r\n\r\n  // Extract important words (non-filler words first)\r\n  const importantWords = words.filter(word => !fillerWords.includes(word));\r\n  \r\n  // If we have 5 or fewer important words, use those\r\n  if (importantWords.length <= 5) {\r\n    return importantWords\r\n      .slice(0, 5)\r\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n      .join(' ');\r\n  }\r\n\r\n  // Otherwise, take first 5 important words\r\n  const summary = importantWords\r\n    .slice(0, 5)\r\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n    .join(' ');\r\n\r\n  return summary;\r\n};\r\n\r\n/**\r\n * Generate an even shorter summary (3 words or less) for compact displays\r\n */\r\nexport const generateShortMealSummary = (description: string): string => {\r\n  if (!description || description.trim() === '') {\r\n    return 'Meal';\r\n  }\r\n\r\n  const cleanDescription = description.trim().replace(/[.,!?;]+$/, '');\r\n  \r\n  // For very short summaries, focus on the main food items\r\n  const words = cleanDescription\r\n    .toLowerCase()\r\n    .split(/\\s+/)\r\n    .filter(word => word.length > 2); // Remove very short words\r\n\r\n  // Common food-related words that are important to keep\r\n  const foodWords = [\r\n    'chicken', 'beef', 'pork', 'fish', 'salmon', 'tuna', 'turkey', 'lamb',\r\n    'rice', 'pasta', 'bread', 'quinoa', 'oats', 'cereal',\r\n    'salad', 'soup', 'sandwich', 'burger', 'pizza', 'taco', 'wrap',\r\n    'eggs', 'cheese', 'milk', 'yogurt',\r\n    'apple', 'banana', 'orange', 'berry', 'fruit',\r\n    'broccoli', 'spinach', 'carrot', 'potato', 'tomato', 'vegetable',\r\n    'grilled', 'baked', 'fried', 'roasted', 'steamed', 'boiled'\r\n  ];\r\n\r\n  // Prioritize food words\r\n  const priorityWords = words.filter(word => foodWords.includes(word));\r\n  const remainingWords = words.filter(word => !foodWords.includes(word));\r\n\r\n  // Combine priority words first, then others\r\n  const selectedWords = [...priorityWords, ...remainingWords].slice(0, 3);\r\n\r\n  if (selectedWords.length === 0) {\r\n    return 'Meal';\r\n  }\r\n\r\n  return selectedWords\r\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n    .join(' ');\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}