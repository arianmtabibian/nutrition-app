{"ast":null,"code":"/**\r\n * Generate a short summary (5 words or less) from a meal description\r\n */\nexport const generateMealSummary = description => {\n  if (!description || description.trim() === '') {\n    return 'Untitled Meal';\n  }\n\n  // Clean the description - remove extra spaces, punctuation at the end\n  const cleanDescription = description.trim().replace(/[.,!?;]+$/, '');\n\n  // Common words to remove for more concise summaries\n  const fillerWords = ['with', 'and', 'or', 'the', 'a', 'an', 'of', 'in', 'on', 'at', 'to', 'for', 'from', 'by', 'about', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'up', 'down', 'out', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'some', 'very', 'really', 'quite', 'rather', 'pretty', 'more', 'most', 'less', 'least', 'much', 'many', 'few', 'little', 'big', 'small', 'large', 'huge', 'tiny'];\n\n  // Split into words and filter\n  const words = cleanDescription.toLowerCase().split(/\\s+/).filter(word => word.length > 0);\n\n  // If it's already 5 words or less, return as is (but capitalized)\n  if (words.length <= 5) {\n    return words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n  }\n\n  // Extract important words (non-filler words first)\n  const importantWords = words.filter(word => !fillerWords.includes(word));\n\n  // If we have 5 or fewer important words, use those\n  if (importantWords.length <= 5) {\n    return importantWords.slice(0, 5).map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n  }\n\n  // Otherwise, take first 5 important words\n  const summary = importantWords.slice(0, 5).map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n  return summary;\n};\n\n/**\r\n * Generate an even shorter summary (3 words or less) for compact displays\r\n */\nexport const generateShortMealSummary = description => {\n  if (!description || description.trim() === '') {\n    return 'Meal';\n  }\n  const cleanDescription = description.trim().replace(/[.,!?;]+$/, '');\n\n  // For very short summaries, focus on the main food items\n  const words = cleanDescription.toLowerCase().split(/\\s+/).filter(word => word.length > 2); // Remove very short words\n\n  // Common food-related words that are important to keep\n  const foodWords = ['chicken', 'beef', 'pork', 'fish', 'salmon', 'tuna', 'turkey', 'lamb', 'rice', 'pasta', 'bread', 'quinoa', 'oats', 'cereal', 'salad', 'soup', 'sandwich', 'burger', 'pizza', 'taco', 'wrap', 'eggs', 'cheese', 'milk', 'yogurt', 'apple', 'banana', 'orange', 'berry', 'fruit', 'broccoli', 'spinach', 'carrot', 'potato', 'tomato', 'vegetable', 'grilled', 'baked', 'fried', 'roasted', 'steamed', 'boiled'];\n\n  // Prioritize food words\n  const priorityWords = words.filter(word => foodWords.includes(word));\n  const remainingWords = words.filter(word => !foodWords.includes(word));\n\n  // Combine priority words first, then others\n  const selectedWords = [...priorityWords, ...remainingWords].slice(0, 3);\n  if (selectedWords.length === 0) {\n    return 'Meal';\n  }\n  return selectedWords.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};","map":{"version":3,"names":["generateMealSummary","description","trim","cleanDescription","replace","fillerWords","words","toLowerCase","split","filter","word","length","map","charAt","toUpperCase","slice","join","importantWords","includes","summary","generateShortMealSummary","foodWords","priorityWords","remainingWords","selectedWords"],"sources":["C:/Users/arian/OneDrive/Desktop/Nutrition/client/src/utils/mealSummary.ts"],"sourcesContent":["/**\r\n * Generate a short summary (5 words or less) from a meal description\r\n */\r\nexport const generateMealSummary = (description: string): string => {\r\n  if (!description || description.trim() === '') {\r\n    return 'Untitled Meal';\r\n  }\r\n\r\n  // Clean the description - remove extra spaces, punctuation at the end\r\n  const cleanDescription = description.trim().replace(/[.,!?;]+$/, '');\r\n  \r\n  // Common words to remove for more concise summaries\r\n  const fillerWords = [\r\n    'with', 'and', 'or', 'the', 'a', 'an', 'of', 'in', 'on', 'at', 'to', 'for',\r\n    'from', 'by', 'about', 'into', 'through', 'during', 'before', 'after',\r\n    'above', 'below', 'up', 'down', 'out', 'off', 'over', 'under', 'again',\r\n    'further', 'then', 'once', 'some', 'very', 'really', 'quite', 'rather',\r\n    'pretty', 'more', 'most', 'less', 'least', 'much', 'many', 'few', 'little',\r\n    'big', 'small', 'large', 'huge', 'tiny'\r\n  ];\r\n\r\n  // Split into words and filter\r\n  const words = cleanDescription\r\n    .toLowerCase()\r\n    .split(/\\s+/)\r\n    .filter(word => word.length > 0);\r\n\r\n  // If it's already 5 words or less, return as is (but capitalized)\r\n  if (words.length <= 5) {\r\n    return words\r\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n      .join(' ');\r\n  }\r\n\r\n  // Extract important words (non-filler words first)\r\n  const importantWords = words.filter(word => !fillerWords.includes(word));\r\n  \r\n  // If we have 5 or fewer important words, use those\r\n  if (importantWords.length <= 5) {\r\n    return importantWords\r\n      .slice(0, 5)\r\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n      .join(' ');\r\n  }\r\n\r\n  // Otherwise, take first 5 important words\r\n  const summary = importantWords\r\n    .slice(0, 5)\r\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n    .join(' ');\r\n\r\n  return summary;\r\n};\r\n\r\n/**\r\n * Generate an even shorter summary (3 words or less) for compact displays\r\n */\r\nexport const generateShortMealSummary = (description: string): string => {\r\n  if (!description || description.trim() === '') {\r\n    return 'Meal';\r\n  }\r\n\r\n  const cleanDescription = description.trim().replace(/[.,!?;]+$/, '');\r\n  \r\n  // For very short summaries, focus on the main food items\r\n  const words = cleanDescription\r\n    .toLowerCase()\r\n    .split(/\\s+/)\r\n    .filter(word => word.length > 2); // Remove very short words\r\n\r\n  // Common food-related words that are important to keep\r\n  const foodWords = [\r\n    'chicken', 'beef', 'pork', 'fish', 'salmon', 'tuna', 'turkey', 'lamb',\r\n    'rice', 'pasta', 'bread', 'quinoa', 'oats', 'cereal',\r\n    'salad', 'soup', 'sandwich', 'burger', 'pizza', 'taco', 'wrap',\r\n    'eggs', 'cheese', 'milk', 'yogurt',\r\n    'apple', 'banana', 'orange', 'berry', 'fruit',\r\n    'broccoli', 'spinach', 'carrot', 'potato', 'tomato', 'vegetable',\r\n    'grilled', 'baked', 'fried', 'roasted', 'steamed', 'boiled'\r\n  ];\r\n\r\n  // Prioritize food words\r\n  const priorityWords = words.filter(word => foodWords.includes(word));\r\n  const remainingWords = words.filter(word => !foodWords.includes(word));\r\n\r\n  // Combine priority words first, then others\r\n  const selectedWords = [...priorityWords, ...remainingWords].slice(0, 3);\r\n\r\n  if (selectedWords.length === 0) {\r\n    return 'Meal';\r\n  }\r\n\r\n  return selectedWords\r\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n    .join(' ');\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,MAAMA,mBAAmB,GAAIC,WAAmB,IAAa;EAClE,IAAI,CAACA,WAAW,IAAIA,WAAW,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IAC7C,OAAO,eAAe;EACxB;;EAEA;EACA,MAAMC,gBAAgB,GAAGF,WAAW,CAACC,IAAI,CAAC,CAAC,CAACE,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;;EAEpE;EACA,MAAMC,WAAW,GAAG,CAClB,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAC1E,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EACrE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EACtE,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EACtE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAC1E,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,CACxC;;EAED;EACA,MAAMC,KAAK,GAAGH,gBAAgB,CAC3BI,WAAW,CAAC,CAAC,CACbC,KAAK,CAAC,KAAK,CAAC,CACZC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC;;EAElC;EACA,IAAIL,KAAK,CAACK,MAAM,IAAI,CAAC,EAAE;IACrB,OAAOL,KAAK,CACTM,GAAG,CAACF,IAAI,IAAIA,IAAI,CAACG,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGJ,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC,CACzDC,IAAI,CAAC,GAAG,CAAC;EACd;;EAEA;EACA,MAAMC,cAAc,GAAGX,KAAK,CAACG,MAAM,CAACC,IAAI,IAAI,CAACL,WAAW,CAACa,QAAQ,CAACR,IAAI,CAAC,CAAC;;EAExE;EACA,IAAIO,cAAc,CAACN,MAAM,IAAI,CAAC,EAAE;IAC9B,OAAOM,cAAc,CAClBF,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CACXH,GAAG,CAACF,IAAI,IAAIA,IAAI,CAACG,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGJ,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC,CACzDC,IAAI,CAAC,GAAG,CAAC;EACd;;EAEA;EACA,MAAMG,OAAO,GAAGF,cAAc,CAC3BF,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CACXH,GAAG,CAACF,IAAI,IAAIA,IAAI,CAACG,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGJ,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC,CACzDC,IAAI,CAAC,GAAG,CAAC;EAEZ,OAAOG,OAAO;AAChB,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,wBAAwB,GAAInB,WAAmB,IAAa;EACvE,IAAI,CAACA,WAAW,IAAIA,WAAW,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IAC7C,OAAO,MAAM;EACf;EAEA,MAAMC,gBAAgB,GAAGF,WAAW,CAACC,IAAI,CAAC,CAAC,CAACE,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;;EAEpE;EACA,MAAME,KAAK,GAAGH,gBAAgB,CAC3BI,WAAW,CAAC,CAAC,CACbC,KAAK,CAAC,KAAK,CAAC,CACZC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;;EAEpC;EACA,MAAMU,SAAS,GAAG,CAChB,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EACrE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EACpD,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAC9D,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAClC,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAC7C,UAAU,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAChE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,CAC5D;;EAED;EACA,MAAMC,aAAa,GAAGhB,KAAK,CAACG,MAAM,CAACC,IAAI,IAAIW,SAAS,CAACH,QAAQ,CAACR,IAAI,CAAC,CAAC;EACpE,MAAMa,cAAc,GAAGjB,KAAK,CAACG,MAAM,CAACC,IAAI,IAAI,CAACW,SAAS,CAACH,QAAQ,CAACR,IAAI,CAAC,CAAC;;EAEtE;EACA,MAAMc,aAAa,GAAG,CAAC,GAAGF,aAAa,EAAE,GAAGC,cAAc,CAAC,CAACR,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EAEvE,IAAIS,aAAa,CAACb,MAAM,KAAK,CAAC,EAAE;IAC9B,OAAO,MAAM;EACf;EAEA,OAAOa,aAAa,CACjBZ,GAAG,CAACF,IAAI,IAAIA,IAAI,CAACG,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGJ,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC,CACzDC,IAAI,CAAC,GAAG,CAAC;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}