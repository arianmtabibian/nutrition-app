{"ast":null,"code":"// Utility for handling authentication persistence across domain changes\nexport const AUTH_STORAGE_KEY='nutritrack_auth_data';/**\r\n * Store authentication data with domain tracking\r\n */export const storeAuthData=(token,user)=>{const authData={token,user,domain:window.location.origin,timestamp:Date.now()};localStorage.setItem(AUTH_STORAGE_KEY,JSON.stringify(authData));localStorage.setItem('token',token);localStorage.setItem('user',JSON.stringify(user));localStorage.setItem('domain',window.location.origin);console.log('Auth data stored for domain:',window.location.origin);};/**\r\n * Retrieve authentication data, handling domain changes gracefully\r\n */export const getAuthData=()=>{try{const authDataStr=localStorage.getItem(AUTH_STORAGE_KEY);if(!authDataStr)return null;const authData=JSON.parse(authDataStr);const currentDomain=window.location.origin;// If domain changed, we still try to use the token\n// The backend will validate if it's still valid\nif(authData.domain!==currentDomain){console.log('Domain changed from',authData.domain,'to',currentDomain);console.log('Attempting to use existing token on new domain');}return authData;}catch(error){console.error('Error retrieving auth data:',error);return null;}};/**\r\n * Clear all authentication data\r\n */export const clearAuthData=()=>{localStorage.removeItem(AUTH_STORAGE_KEY);localStorage.removeItem('token');localStorage.removeItem('user');localStorage.removeItem('domain');localStorage.removeItem('local_posts');// Clear old format\nlocalStorage.removeItem('nutritrack_local_posts');// Clear new format\nconsole.log('All auth data cleared');};/**\r\n * Check if we have valid authentication data\r\n */export const hasValidAuth=()=>{const authData=getAuthData();if(!authData)return false;// Check if token is not too old (7 days)\nconst tokenAge=Date.now()-authData.timestamp;const maxAge=7*24*60*60*1000;// 7 days in milliseconds\nif(tokenAge>maxAge){console.log('Token is too old, clearing auth data');clearAuthData();return false;}return true;};","map":{"version":3,"names":["AUTH_STORAGE_KEY","storeAuthData","token","user","authData","domain","window","location","origin","timestamp","Date","now","localStorage","setItem","JSON","stringify","console","log","getAuthData","authDataStr","getItem","parse","currentDomain","error","clearAuthData","removeItem","hasValidAuth","tokenAge","maxAge"],"sources":["C:/Users/arian/OneDrive/Desktop/Nutrition/client/src/utils/authPersistence.ts"],"sourcesContent":["// Utility for handling authentication persistence across domain changes\r\nexport interface UserData {\r\n  token: string;\r\n  user: any;\r\n  domain: string;\r\n  timestamp: number;\r\n}\r\n\r\nexport const AUTH_STORAGE_KEY = 'nutritrack_auth_data';\r\n\r\n/**\r\n * Store authentication data with domain tracking\r\n */\r\nexport const storeAuthData = (token: string, user: any): void => {\r\n  const authData: UserData = {\r\n    token,\r\n    user,\r\n    domain: window.location.origin,\r\n    timestamp: Date.now()\r\n  };\r\n  \r\n  localStorage.setItem(AUTH_STORAGE_KEY, JSON.stringify(authData));\r\n  localStorage.setItem('token', token);\r\n  localStorage.setItem('user', JSON.stringify(user));\r\n  localStorage.setItem('domain', window.location.origin);\r\n  \r\n  console.log('Auth data stored for domain:', window.location.origin);\r\n};\r\n\r\n/**\r\n * Retrieve authentication data, handling domain changes gracefully\r\n */\r\nexport const getAuthData = (): UserData | null => {\r\n  try {\r\n    const authDataStr = localStorage.getItem(AUTH_STORAGE_KEY);\r\n    if (!authDataStr) return null;\r\n    \r\n    const authData: UserData = JSON.parse(authDataStr);\r\n    const currentDomain = window.location.origin;\r\n    \r\n    // If domain changed, we still try to use the token\r\n    // The backend will validate if it's still valid\r\n    if (authData.domain !== currentDomain) {\r\n      console.log('Domain changed from', authData.domain, 'to', currentDomain);\r\n      console.log('Attempting to use existing token on new domain');\r\n    }\r\n    \r\n    return authData;\r\n  } catch (error) {\r\n    console.error('Error retrieving auth data:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Clear all authentication data\r\n */\r\nexport const clearAuthData = (): void => {\r\n  localStorage.removeItem(AUTH_STORAGE_KEY);\r\n  localStorage.removeItem('token');\r\n  localStorage.removeItem('user');\r\n  localStorage.removeItem('domain');\r\n  localStorage.removeItem('local_posts'); // Clear old format\r\n  localStorage.removeItem('nutritrack_local_posts'); // Clear new format\r\n  console.log('All auth data cleared');\r\n};\r\n\r\n/**\r\n * Check if we have valid authentication data\r\n */\r\nexport const hasValidAuth = (): boolean => {\r\n  const authData = getAuthData();\r\n  if (!authData) return false;\r\n  \r\n  // Check if token is not too old (7 days)\r\n  const tokenAge = Date.now() - authData.timestamp;\r\n  const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 days in milliseconds\r\n  \r\n  if (tokenAge > maxAge) {\r\n    console.log('Token is too old, clearing auth data');\r\n    clearAuthData();\r\n    return false;\r\n  }\r\n  \r\n  return true;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}