{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst LOCAL_POSTS_KEY = 'nutritrack_local_posts';\nexport const usePostPersistence = () => {\n  _s();\n  const [localPosts, setLocalPosts] = useState([]);\n\n  // Load local posts on mount\n  useEffect(() => {\n    try {\n      const stored = localStorage.getItem(LOCAL_POSTS_KEY);\n      if (stored) {\n        const posts = JSON.parse(stored);\n        console.log('üîÑ usePostPersistence: Loaded local posts:', posts.length);\n        setLocalPosts(posts);\n      }\n    } catch (error) {\n      console.error('‚ùå Error loading local posts:', error);\n      setLocalPosts([]);\n    }\n  }, []);\n\n  // Save a new post locally\n  const savePostLocally = post => {\n    try {\n      console.log('üíæ usePostPersistence: Saving post locally:', post.id);\n      const updatedPosts = [post, ...localPosts.filter(p => p.id !== post.id)];\n      setLocalPosts(updatedPosts);\n      localStorage.setItem(LOCAL_POSTS_KEY, JSON.stringify(updatedPosts));\n      console.log('‚úÖ usePostPersistence: Post saved successfully');\n    } catch (error) {\n      console.error('‚ùå Error saving post locally:', error);\n    }\n  };\n\n  // Merge server posts with local posts\n  const mergeWithServerPosts = serverPosts => {\n    try {\n      console.log('üîÑ usePostPersistence: Merging posts');\n      console.log('üíæ Local posts:', localPosts.length);\n      console.log('üåê Server posts:', serverPosts.length);\n      const merged = [...localPosts];\n      let addedFromServer = 0;\n      serverPosts.forEach(serverPost => {\n        const existsLocally = localPosts.some(localPost => {\n          const idMatch = localPost.id === serverPost.id;\n          const contentMatch = localPost.content === serverPost.content;\n          const timeMatch = Math.abs(new Date(localPost.created_at).getTime() - new Date(serverPost.created_at).getTime()) < 15000; // 15 second window\n\n          return idMatch || contentMatch && timeMatch;\n        });\n        if (!existsLocally) {\n          merged.push(serverPost);\n          addedFromServer++;\n        }\n      });\n\n      // Sort by creation date (newest first)\n      merged.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());\n      console.log('‚úÖ usePostPersistence: Merged successfully:', merged.length, 'total posts');\n      console.log(`   - ${localPosts.length} local posts`);\n      console.log(`   - ${addedFromServer} added from server`);\n\n      // Clean up old local posts (older than 10 minutes)\n      const tenMinutesAgo = Date.now() - 10 * 60 * 1000;\n      const recentLocalPosts = localPosts.filter(post => new Date(post.created_at).getTime() > tenMinutesAgo);\n      if (recentLocalPosts.length !== localPosts.length) {\n        console.log('üßπ usePostPersistence: Cleaning up old local posts');\n        setLocalPosts(recentLocalPosts);\n        localStorage.setItem(LOCAL_POSTS_KEY, JSON.stringify(recentLocalPosts));\n      }\n      return merged;\n    } catch (error) {\n      console.error('‚ùå Error merging posts:', error);\n      return serverPosts;\n    }\n  };\n\n  // Clear all local posts\n  const clearLocalPosts = () => {\n    try {\n      console.log('üßπ usePostPersistence: Clearing all local posts');\n      setLocalPosts([]);\n      localStorage.removeItem(LOCAL_POSTS_KEY);\n    } catch (error) {\n      console.error('‚ùå Error clearing local posts:', error);\n    }\n  };\n  return {\n    localPosts,\n    savePostLocally,\n    mergeWithServerPosts,\n    clearLocalPosts\n  };\n};\n_s(usePostPersistence, \"imnkczGaeb6LsW6yU6z2AAq8UDU=\");","map":{"version":3,"names":["useState","useEffect","LOCAL_POSTS_KEY","usePostPersistence","_s","localPosts","setLocalPosts","stored","localStorage","getItem","posts","JSON","parse","console","log","length","error","savePostLocally","post","id","updatedPosts","filter","p","setItem","stringify","mergeWithServerPosts","serverPosts","merged","addedFromServer","forEach","serverPost","existsLocally","some","localPost","idMatch","contentMatch","content","timeMatch","Math","abs","Date","created_at","getTime","push","sort","a","b","tenMinutesAgo","now","recentLocalPosts","clearLocalPosts","removeItem"],"sources":["C:/Users/arian/OneDrive/Desktop/Nutrition/client/src/hooks/usePostPersistence.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\ninterface Post {\r\n  id: number;\r\n  content: string;\r\n  image_url: string | null;\r\n  meal_data: any;\r\n  likes_count: number;\r\n  comments_count: number;\r\n  is_liked: boolean;\r\n  is_bookmarked: boolean;\r\n  allow_comments?: boolean;\r\n  hide_like_count?: boolean;\r\n  created_at: string;\r\n  user: {\r\n    id: number;\r\n    username: string;\r\n    first_name: string;\r\n    last_name: string;\r\n    profile_picture?: string;\r\n  };\r\n}\r\n\r\nconst LOCAL_POSTS_KEY = 'nutritrack_local_posts';\r\n\r\nexport const usePostPersistence = () => {\r\n  const [localPosts, setLocalPosts] = useState<Post[]>([]);\r\n\r\n  // Load local posts on mount\r\n  useEffect(() => {\r\n    try {\r\n      const stored = localStorage.getItem(LOCAL_POSTS_KEY);\r\n      if (stored) {\r\n        const posts = JSON.parse(stored);\r\n        console.log('üîÑ usePostPersistence: Loaded local posts:', posts.length);\r\n        setLocalPosts(posts);\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå Error loading local posts:', error);\r\n      setLocalPosts([]);\r\n    }\r\n  }, []);\r\n\r\n  // Save a new post locally\r\n  const savePostLocally = (post: Post) => {\r\n    try {\r\n      console.log('üíæ usePostPersistence: Saving post locally:', post.id);\r\n      const updatedPosts = [post, ...localPosts.filter(p => p.id !== post.id)];\r\n      setLocalPosts(updatedPosts);\r\n      localStorage.setItem(LOCAL_POSTS_KEY, JSON.stringify(updatedPosts));\r\n      console.log('‚úÖ usePostPersistence: Post saved successfully');\r\n    } catch (error) {\r\n      console.error('‚ùå Error saving post locally:', error);\r\n    }\r\n  };\r\n\r\n  // Merge server posts with local posts\r\n  const mergeWithServerPosts = (serverPosts: Post[]): Post[] => {\r\n    try {\r\n      console.log('üîÑ usePostPersistence: Merging posts');\r\n      console.log('üíæ Local posts:', localPosts.length);\r\n      console.log('üåê Server posts:', serverPosts.length);\r\n\r\n      const merged = [...localPosts];\r\n      let addedFromServer = 0;\r\n\r\n      serverPosts.forEach(serverPost => {\r\n        const existsLocally = localPosts.some(localPost => {\r\n          const idMatch = localPost.id === serverPost.id;\r\n          const contentMatch = localPost.content === serverPost.content;\r\n          const timeMatch = Math.abs(\r\n            new Date(localPost.created_at).getTime() - \r\n            new Date(serverPost.created_at).getTime()\r\n          ) < 15000; // 15 second window\r\n\r\n          return idMatch || (contentMatch && timeMatch);\r\n        });\r\n\r\n        if (!existsLocally) {\r\n          merged.push(serverPost);\r\n          addedFromServer++;\r\n        }\r\n      });\r\n\r\n      // Sort by creation date (newest first)\r\n      merged.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());\r\n\r\n      console.log('‚úÖ usePostPersistence: Merged successfully:', merged.length, 'total posts');\r\n      console.log(`   - ${localPosts.length} local posts`);\r\n      console.log(`   - ${addedFromServer} added from server`);\r\n\r\n      // Clean up old local posts (older than 10 minutes)\r\n      const tenMinutesAgo = Date.now() - 10 * 60 * 1000;\r\n      const recentLocalPosts = localPosts.filter(post => \r\n        new Date(post.created_at).getTime() > tenMinutesAgo\r\n      );\r\n\r\n      if (recentLocalPosts.length !== localPosts.length) {\r\n        console.log('üßπ usePostPersistence: Cleaning up old local posts');\r\n        setLocalPosts(recentLocalPosts);\r\n        localStorage.setItem(LOCAL_POSTS_KEY, JSON.stringify(recentLocalPosts));\r\n      }\r\n\r\n      return merged;\r\n    } catch (error) {\r\n      console.error('‚ùå Error merging posts:', error);\r\n      return serverPosts;\r\n    }\r\n  };\r\n\r\n  // Clear all local posts\r\n  const clearLocalPosts = () => {\r\n    try {\r\n      console.log('üßπ usePostPersistence: Clearing all local posts');\r\n      setLocalPosts([]);\r\n      localStorage.removeItem(LOCAL_POSTS_KEY);\r\n    } catch (error) {\r\n      console.error('‚ùå Error clearing local posts:', error);\r\n    }\r\n  };\r\n\r\n  return {\r\n    localPosts,\r\n    savePostLocally,\r\n    mergeWithServerPosts,\r\n    clearLocalPosts\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}