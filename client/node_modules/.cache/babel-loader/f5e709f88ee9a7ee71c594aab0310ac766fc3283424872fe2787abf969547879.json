{"ast":null,"code":"/**\r\n * Utility functions for checking server health and connectivity\r\n */\n\nimport { api } from '../services/api';\n\n/**\r\n * Check if the server is accessible and responsive\r\n */\nexport const checkServerHealth = async () => {\n  try {\n    const startTime = Date.now();\n    const response = await api.get('/api/auth/health', {\n      timeout: 5000 // 5 second timeout for health check\n    });\n    const endTime = Date.now();\n    const responseTime = endTime - startTime;\n    if (response.status === 200) {\n      return {\n        isHealthy: true,\n        message: 'Server is healthy and responsive',\n        responseTime\n      };\n    } else {\n      return {\n        isHealthy: false,\n        message: `Server returned status ${response.status}`,\n        responseTime\n      };\n    }\n  } catch (error) {\n    var _error$message, _error$message2, _error$response;\n    console.error('Health check failed:', error);\n    if (error.code === 'ECONNABORTED' || (_error$message = error.message) !== null && _error$message !== void 0 && _error$message.includes('timeout')) {\n      return {\n        isHealthy: false,\n        message: 'Server is not responding (timeout)'\n      };\n    } else if (error.code === 'ERR_NETWORK' || (_error$message2 = error.message) !== null && _error$message2 !== void 0 && _error$message2.includes('Network Error')) {\n      return {\n        isHealthy: false,\n        message: 'Cannot connect to server (network error)'\n      };\n    } else if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 404) {\n      return {\n        isHealthy: false,\n        message: 'Server is running but health endpoint not found'\n      };\n    } else {\n      return {\n        isHealthy: false,\n        message: `Server error: ${error.message}`\n      };\n    }\n  }\n};\n\n/**\r\n * Test registration endpoint accessibility\r\n */\nexport const testRegistrationEndpoint = async () => {\n  try {\n    // Try to make a request to the registration endpoint with invalid data\n    // This should return a 400 error, which means the endpoint is accessible\n    const response = await api.post('/api/auth/register', {\n      // Invalid data to trigger 400 error\n    }, {\n      timeout: 5000\n    });\n\n    // If we get here, something unexpected happened\n    return {\n      isAccessible: true,\n      message: 'Registration endpoint is accessible (unexpected response)'\n    };\n  } catch (error) {\n    var _error$response2, _error$message3, _error$message4;\n    if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 400) {\n      // This is expected - endpoint is accessible but data is invalid\n      return {\n        isAccessible: true,\n        message: 'Registration endpoint is accessible'\n      };\n    } else if (error.code === 'ECONNABORTED' || (_error$message3 = error.message) !== null && _error$message3 !== void 0 && _error$message3.includes('timeout')) {\n      return {\n        isAccessible: false,\n        message: 'Registration endpoint is not responding (timeout)'\n      };\n    } else if (error.code === 'ERR_NETWORK' || (_error$message4 = error.message) !== null && _error$message4 !== void 0 && _error$message4.includes('Network Error')) {\n      return {\n        isAccessible: false,\n        message: 'Cannot connect to registration endpoint (network error)'\n      };\n    } else {\n      return {\n        isAccessible: false,\n        message: `Registration endpoint error: ${error.message}`\n      };\n    }\n  }\n};","map":{"version":3,"names":["api","checkServerHealth","startTime","Date","now","response","get","timeout","endTime","responseTime","status","isHealthy","message","error","_error$message","_error$message2","_error$response","console","code","includes","testRegistrationEndpoint","post","isAccessible","_error$response2","_error$message3","_error$message4"],"sources":["C:/Users/arian/OneDrive/Desktop/Nutrition/client/src/utils/serverHealthCheck.ts"],"sourcesContent":["/**\r\n * Utility functions for checking server health and connectivity\r\n */\r\n\r\nimport { api } from '../services/api';\r\n\r\n/**\r\n * Check if the server is accessible and responsive\r\n */\r\nexport const checkServerHealth = async (): Promise<{ isHealthy: boolean; message: string; responseTime?: number }> => {\r\n  try {\r\n    const startTime = Date.now();\r\n    \r\n    const response = await api.get('/api/auth/health', { \r\n      timeout: 5000 // 5 second timeout for health check\r\n    });\r\n    \r\n    const endTime = Date.now();\r\n    const responseTime = endTime - startTime;\r\n    \r\n    if (response.status === 200) {\r\n      return {\r\n        isHealthy: true,\r\n        message: 'Server is healthy and responsive',\r\n        responseTime\r\n      };\r\n    } else {\r\n      return {\r\n        isHealthy: false,\r\n        message: `Server returned status ${response.status}`,\r\n        responseTime\r\n      };\r\n    }\r\n  } catch (error: any) {\r\n    console.error('Health check failed:', error);\r\n    \r\n    if (error.code === 'ECONNABORTED' || error.message?.includes('timeout')) {\r\n      return {\r\n        isHealthy: false,\r\n        message: 'Server is not responding (timeout)'\r\n      };\r\n    } else if (error.code === 'ERR_NETWORK' || error.message?.includes('Network Error')) {\r\n      return {\r\n        isHealthy: false,\r\n        message: 'Cannot connect to server (network error)'\r\n      };\r\n    } else if (error.response?.status === 404) {\r\n      return {\r\n        isHealthy: false,\r\n        message: 'Server is running but health endpoint not found'\r\n      };\r\n    } else {\r\n      return {\r\n        isHealthy: false,\r\n        message: `Server error: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Test registration endpoint accessibility\r\n */\r\nexport const testRegistrationEndpoint = async (): Promise<{ isAccessible: boolean; message: string }> => {\r\n  try {\r\n    // Try to make a request to the registration endpoint with invalid data\r\n    // This should return a 400 error, which means the endpoint is accessible\r\n    const response = await api.post('/api/auth/register', {\r\n      // Invalid data to trigger 400 error\r\n    }, {\r\n      timeout: 5000\r\n    });\r\n    \r\n    // If we get here, something unexpected happened\r\n    return {\r\n      isAccessible: true,\r\n      message: 'Registration endpoint is accessible (unexpected response)'\r\n    };\r\n  } catch (error: any) {\r\n    if (error.response?.status === 400) {\r\n      // This is expected - endpoint is accessible but data is invalid\r\n      return {\r\n        isAccessible: true,\r\n        message: 'Registration endpoint is accessible'\r\n      };\r\n    } else if (error.code === 'ECONNABORTED' || error.message?.includes('timeout')) {\r\n      return {\r\n        isAccessible: false,\r\n        message: 'Registration endpoint is not responding (timeout)'\r\n      };\r\n    } else if (error.code === 'ERR_NETWORK' || error.message?.includes('Network Error')) {\r\n      return {\r\n        isAccessible: false,\r\n        message: 'Cannot connect to registration endpoint (network error)'\r\n      };\r\n    } else {\r\n      return {\r\n        isAccessible: false,\r\n        message: `Registration endpoint error: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}