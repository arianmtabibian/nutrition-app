{"ast":null,"code":"// Utility for handling authentication persistence across domain changes\n\nexport const AUTH_STORAGE_KEY = 'nutritrack_auth_data';\n\n/**\r\n * Store authentication data with domain tracking\r\n */\nexport const storeAuthData = (token, user) => {\n  const authData = {\n    token,\n    user,\n    domain: window.location.origin,\n    timestamp: Date.now()\n  };\n  localStorage.setItem(AUTH_STORAGE_KEY, JSON.stringify(authData));\n  localStorage.setItem('token', token);\n  localStorage.setItem('user', JSON.stringify(user));\n  localStorage.setItem('domain', window.location.origin);\n  console.log('Auth data stored for domain:', window.location.origin);\n};\n\n/**\r\n * Retrieve authentication data, handling domain changes gracefully\r\n */\nexport const getAuthData = () => {\n  try {\n    const authDataStr = localStorage.getItem(AUTH_STORAGE_KEY);\n    if (!authDataStr) return null;\n    const authData = JSON.parse(authDataStr);\n    const currentDomain = window.location.origin;\n\n    // If domain changed, we still try to use the token\n    // The backend will validate if it's still valid\n    if (authData.domain !== currentDomain) {\n      console.log('Domain changed from', authData.domain, 'to', currentDomain);\n      console.log('Attempting to use existing token on new domain');\n    }\n    return authData;\n  } catch (error) {\n    console.error('Error retrieving auth data:', error);\n    return null;\n  }\n};\n\n/**\r\n * Clear all authentication data\r\n */\nexport const clearAuthData = () => {\n  localStorage.removeItem(AUTH_STORAGE_KEY);\n  localStorage.removeItem('token');\n  localStorage.removeItem('user');\n  localStorage.removeItem('domain');\n  // DON'T clear posts data - let it persist across logins\n  // localStorage.removeItem('local_posts'); // Keep posts\n  // localStorage.removeItem('nutritrack_local_posts'); // Keep posts\n  console.log('Auth data cleared (posts preserved)');\n};\n\n/**\r\n * Check if we have valid authentication data\r\n */\nexport const hasValidAuth = () => {\n  const authData = getAuthData();\n  if (!authData) return false;\n\n  // Check if token is not too old (7 days)\n  const tokenAge = Date.now() - authData.timestamp;\n  const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 days in milliseconds\n\n  if (tokenAge > maxAge) {\n    console.log('Token is too old, clearing auth data');\n    clearAuthData();\n    return false;\n  }\n  return true;\n};","map":{"version":3,"names":["AUTH_STORAGE_KEY","storeAuthData","token","user","authData","domain","window","location","origin","timestamp","Date","now","localStorage","setItem","JSON","stringify","console","log","getAuthData","authDataStr","getItem","parse","currentDomain","error","clearAuthData","removeItem","hasValidAuth","tokenAge","maxAge"],"sources":["C:/Users/arian/OneDrive/Desktop/Nutrition/client/src/utils/authPersistence.ts"],"sourcesContent":["// Utility for handling authentication persistence across domain changes\r\nexport interface UserData {\r\n  token: string;\r\n  user: any;\r\n  domain: string;\r\n  timestamp: number;\r\n}\r\n\r\nexport const AUTH_STORAGE_KEY = 'nutritrack_auth_data';\r\n\r\n/**\r\n * Store authentication data with domain tracking\r\n */\r\nexport const storeAuthData = (token: string, user: any): void => {\r\n  const authData: UserData = {\r\n    token,\r\n    user,\r\n    domain: window.location.origin,\r\n    timestamp: Date.now()\r\n  };\r\n  \r\n  localStorage.setItem(AUTH_STORAGE_KEY, JSON.stringify(authData));\r\n  localStorage.setItem('token', token);\r\n  localStorage.setItem('user', JSON.stringify(user));\r\n  localStorage.setItem('domain', window.location.origin);\r\n  \r\n  console.log('Auth data stored for domain:', window.location.origin);\r\n};\r\n\r\n/**\r\n * Retrieve authentication data, handling domain changes gracefully\r\n */\r\nexport const getAuthData = (): UserData | null => {\r\n  try {\r\n    const authDataStr = localStorage.getItem(AUTH_STORAGE_KEY);\r\n    if (!authDataStr) return null;\r\n    \r\n    const authData: UserData = JSON.parse(authDataStr);\r\n    const currentDomain = window.location.origin;\r\n    \r\n    // If domain changed, we still try to use the token\r\n    // The backend will validate if it's still valid\r\n    if (authData.domain !== currentDomain) {\r\n      console.log('Domain changed from', authData.domain, 'to', currentDomain);\r\n      console.log('Attempting to use existing token on new domain');\r\n    }\r\n    \r\n    return authData;\r\n  } catch (error) {\r\n    console.error('Error retrieving auth data:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Clear all authentication data\r\n */\r\nexport const clearAuthData = (): void => {\r\n  localStorage.removeItem(AUTH_STORAGE_KEY);\r\n  localStorage.removeItem('token');\r\n  localStorage.removeItem('user');\r\n  localStorage.removeItem('domain');\r\n  // DON'T clear posts data - let it persist across logins\r\n  // localStorage.removeItem('local_posts'); // Keep posts\r\n  // localStorage.removeItem('nutritrack_local_posts'); // Keep posts\r\n  console.log('Auth data cleared (posts preserved)');\r\n};\r\n\r\n/**\r\n * Check if we have valid authentication data\r\n */\r\nexport const hasValidAuth = (): boolean => {\r\n  const authData = getAuthData();\r\n  if (!authData) return false;\r\n  \r\n  // Check if token is not too old (7 days)\r\n  const tokenAge = Date.now() - authData.timestamp;\r\n  const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 days in milliseconds\r\n  \r\n  if (tokenAge > maxAge) {\r\n    console.log('Token is too old, clearing auth data');\r\n    clearAuthData();\r\n    return false;\r\n  }\r\n  \r\n  return true;\r\n};\r\n"],"mappings":"AAAA;;AAQA,OAAO,MAAMA,gBAAgB,GAAG,sBAAsB;;AAEtD;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAGA,CAACC,KAAa,EAAEC,IAAS,KAAW;EAC/D,MAAMC,QAAkB,GAAG;IACzBF,KAAK;IACLC,IAAI;IACJE,MAAM,EAAEC,MAAM,CAACC,QAAQ,CAACC,MAAM;IAC9BC,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;EACtB,CAAC;EAEDC,YAAY,CAACC,OAAO,CAACb,gBAAgB,EAAEc,IAAI,CAACC,SAAS,CAACX,QAAQ,CAAC,CAAC;EAChEQ,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEX,KAAK,CAAC;EACpCU,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACZ,IAAI,CAAC,CAAC;EAClDS,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEP,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC;EAEtDQ,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEX,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC;AACrE,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMU,WAAW,GAAGA,CAAA,KAAuB;EAChD,IAAI;IACF,MAAMC,WAAW,GAAGP,YAAY,CAACQ,OAAO,CAACpB,gBAAgB,CAAC;IAC1D,IAAI,CAACmB,WAAW,EAAE,OAAO,IAAI;IAE7B,MAAMf,QAAkB,GAAGU,IAAI,CAACO,KAAK,CAACF,WAAW,CAAC;IAClD,MAAMG,aAAa,GAAGhB,MAAM,CAACC,QAAQ,CAACC,MAAM;;IAE5C;IACA;IACA,IAAIJ,QAAQ,CAACC,MAAM,KAAKiB,aAAa,EAAE;MACrCN,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEb,QAAQ,CAACC,MAAM,EAAE,IAAI,EAAEiB,aAAa,CAAC;MACxEN,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;IAC/D;IAEA,OAAOb,QAAQ;EACjB,CAAC,CAAC,OAAOmB,KAAK,EAAE;IACdP,OAAO,CAACO,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAY;EACvCZ,YAAY,CAACa,UAAU,CAACzB,gBAAgB,CAAC;EACzCY,YAAY,CAACa,UAAU,CAAC,OAAO,CAAC;EAChCb,YAAY,CAACa,UAAU,CAAC,MAAM,CAAC;EAC/Bb,YAAY,CAACa,UAAU,CAAC,QAAQ,CAAC;EACjC;EACA;EACA;EACAT,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;AACpD,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMS,YAAY,GAAGA,CAAA,KAAe;EACzC,MAAMtB,QAAQ,GAAGc,WAAW,CAAC,CAAC;EAC9B,IAAI,CAACd,QAAQ,EAAE,OAAO,KAAK;;EAE3B;EACA,MAAMuB,QAAQ,GAAGjB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGP,QAAQ,CAACK,SAAS;EAChD,MAAMmB,MAAM,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;;EAExC,IAAID,QAAQ,GAAGC,MAAM,EAAE;IACrBZ,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;IACnDO,aAAa,CAAC,CAAC;IACf,OAAO,KAAK;EACd;EAEA,OAAO,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}