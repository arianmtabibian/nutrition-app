{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arian\\\\OneDrive\\\\Desktop\\\\Nutrition\\\\client\\\\src\\\\components\\\\OnboardingGuard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { profileAPI } from '../services/api';\nimport LoadingSpinner from './ui/LoadingSpinner';\nimport { hasCompletedOnboardingFromProfile } from '../utils/onboardingUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst OnboardingGuard = ({\n  children,\n  requireOnboarding = true\n}) => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [hasCompletedOnboarding, setHasCompletedOnboarding] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const checkOnboardingStatus = async () => {\n      try {\n        console.log('🔍 OnboardingGuard: Checking onboarding status...');\n        console.log('🔍 OnboardingGuard: requireOnboarding =', requireOnboarding);\n\n        // First check if onboarding was just completed (immediate fallback)\n        const justCompleted = localStorage.getItem('onboarding_just_completed');\n        if (justCompleted === 'true') {\n          console.log('🔍 OnboardingGuard: Onboarding was just completed, allowing access');\n          setHasCompletedOnboarding(true);\n          setLoading(false);\n          // Clear the just completed flag\n          localStorage.removeItem('onboarding_just_completed');\n          return;\n        }\n\n        // First, try a simple health check to test connectivity\n        try {\n          console.log('🔍 OnboardingGuard: Testing profile API connectivity...');\n          await profileAPI.health();\n          console.log('🔍 OnboardingGuard: Profile API is responsive');\n        } catch (healthError) {\n          console.warn('🔍 OnboardingGuard: Profile API health check failed:', healthError.message);\n          // Continue anyway, the main request might still work\n        }\n\n        // Try to get profile with retry mechanism\n        let response = null;\n        let retryCount = 0;\n        const maxRetries = 2;\n        while (retryCount <= maxRetries) {\n          try {\n            response = await profileAPI.get();\n            break; // Success, exit retry loop\n          } catch (retryError) {\n            retryCount++;\n            console.log(`🔍 OnboardingGuard: Profile check attempt ${retryCount} failed:`, retryError.message);\n            if (retryCount > maxRetries) {\n              throw retryError; // Re-throw the error if we've exhausted retries\n            }\n\n            // Wait before retrying (exponential backoff)\n            await new Promise(resolve => setTimeout(resolve, 1000 * retryCount));\n          }\n        }\n\n        // Check if we got a valid response\n        if (!response || !response.data) {\n          throw new Error('No valid response received from profile API');\n        }\n        console.log('🔍 OnboardingGuard: Full API response:', response.data);\n\n        // Check if user has daily_calories set (key onboarding field)\n        const profile = response.data.profile;\n        const hasCompletedOnboardingFromAPI = response.data.hasCompletedOnboarding;\n\n        // Use utility function for consistent onboarding completion check\n        const completed = hasCompletedOnboardingFromProfile(profile);\n        console.log('🔍 OnboardingGuard: Profile object:', profile);\n        console.log('🔍 OnboardingGuard: daily_calories value:', profile === null || profile === void 0 ? void 0 : profile.daily_calories);\n        console.log('🔍 OnboardingGuard: daily_protein value:', profile === null || profile === void 0 ? void 0 : profile.daily_protein);\n        console.log('🔍 OnboardingGuard: hasCompletedOnboarding from API:', hasCompletedOnboardingFromAPI);\n        console.log('🔍 OnboardingGuard: Calculated completed:', completed);\n        console.log('🔍 OnboardingGuard: Final decision - Has completed onboarding:', completed);\n        setHasCompletedOnboarding(completed);\n        setError(null);\n      } catch (error) {\n        var _error$response, _error$message;\n        console.error('🔍 OnboardingGuard: Error checking onboarding status:', error);\n        console.error('🔍 OnboardingGuard: Error response:', error.response);\n        console.error('🔍 OnboardingGuard: Error code:', error.code);\n        console.error('🔍 OnboardingGuard: Error message:', error.message);\n        if ((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 404) {\n          // No profile exists = hasn't completed onboarding\n          console.log('🔍 OnboardingGuard: No profile found (404) = not completed');\n          setHasCompletedOnboarding(false);\n        } else if (error.code === 'ERR_NETWORK' || (_error$message = error.message) !== null && _error$message !== void 0 && _error$message.includes('Network Error') || error.code === 'ERR_FAILED') {\n          // Network error or server down - check localStorage as fallback\n          console.log('🔍 OnboardingGuard: Network/server error, checking localStorage fallback');\n          console.log('🔍 OnboardingGuard: Error details:', {\n            code: error.code,\n            message: error.message\n          });\n          const onboardingCompleted = localStorage.getItem('onboarding_completed');\n          const onboardingDate = localStorage.getItem('onboarding_completed_date');\n          if (onboardingCompleted === 'true') {\n            console.log('🔍 OnboardingGuard: localStorage indicates onboarding completed on:', onboardingDate);\n            setHasCompletedOnboarding(true);\n            setError('Server temporarily unavailable - using cached data');\n          } else {\n            console.log('🔍 OnboardingGuard: localStorage indicates onboarding not completed');\n            setHasCompletedOnboarding(false);\n            setError('Server temporarily unavailable - please try again');\n          }\n        } else {\n          // For other errors, assume they haven't completed onboarding to be safe\n          console.log('🔍 OnboardingGuard: Error occurred, assuming not completed');\n          setHasCompletedOnboarding(false);\n          setError('Unable to verify onboarding status');\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkOnboardingStatus();\n  }, [requireOnboarding]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If we require onboarding to be completed but it's not\n  if (requireOnboarding && !hasCompletedOnboarding) {\n    console.log('🚫 OnboardingGuard: REDIRECT DECISION - Need onboarding completed but it is not');\n    console.log('🚫 OnboardingGuard: requireOnboarding =', requireOnboarding, 'hasCompletedOnboarding =', hasCompletedOnboarding);\n    console.log('🚫 OnboardingGuard: Redirecting to /onboarding');\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/onboarding\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If we require onboarding to NOT be completed but it is\n  if (!requireOnboarding && hasCompletedOnboarding) {\n    console.log('🚫 OnboardingGuard: REDIRECT DECISION - Onboarding should not be completed but it is');\n    console.log('🚫 OnboardingGuard: requireOnboarding =', requireOnboarding, 'hasCompletedOnboarding =', hasCompletedOnboarding);\n    console.log('🚫 OnboardingGuard: Redirecting to /dashboard');\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/dashboard\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Show error if there was one, but still allow access\n  if (error) {\n    console.warn('⚠️ OnboardingGuard: Proceeding despite error:', error);\n  }\n  console.log('✅ OnboardingGuard: Access granted');\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n_s(OnboardingGuard, \"iQC7p5TQv9tJdsc1ppIllYJD9lI=\");\n_c = OnboardingGuard;\nexport default OnboardingGuard;\nvar _c;\n$RefreshReg$(_c, \"OnboardingGuard\");","map":{"version":3,"names":["React","useEffect","useState","Navigate","profileAPI","LoadingSpinner","hasCompletedOnboardingFromProfile","jsxDEV","_jsxDEV","Fragment","_Fragment","OnboardingGuard","children","requireOnboarding","_s","loading","setLoading","hasCompletedOnboarding","setHasCompletedOnboarding","error","setError","checkOnboardingStatus","console","log","justCompleted","localStorage","getItem","removeItem","health","healthError","warn","message","response","retryCount","maxRetries","get","retryError","Promise","resolve","setTimeout","data","Error","profile","hasCompletedOnboardingFromAPI","completed","daily_calories","daily_protein","_error$response","_error$message","code","status","includes","onboardingCompleted","onboardingDate","fileName","_jsxFileName","lineNumber","columnNumber","to","replace","_c","$RefreshReg$"],"sources":["C:/Users/arian/OneDrive/Desktop/Nutrition/client/src/components/OnboardingGuard.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { profileAPI } from '../services/api';\r\nimport LoadingSpinner from './ui/LoadingSpinner';\r\nimport { hasCompletedOnboardingFromProfile } from '../utils/onboardingUtils';\r\n\r\ninterface OnboardingGuardProps {\r\n  children: React.ReactNode;\r\n  requireOnboarding?: boolean; // true = must have completed onboarding, false = must NOT have completed\r\n}\r\n\r\nconst OnboardingGuard: React.FC<OnboardingGuardProps> = ({ children, requireOnboarding = true }) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [hasCompletedOnboarding, setHasCompletedOnboarding] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const checkOnboardingStatus = async () => {\r\n      try {\r\n        console.log('🔍 OnboardingGuard: Checking onboarding status...');\r\n        console.log('🔍 OnboardingGuard: requireOnboarding =', requireOnboarding);\r\n        \r\n        // First check if onboarding was just completed (immediate fallback)\r\n        const justCompleted = localStorage.getItem('onboarding_just_completed');\r\n        if (justCompleted === 'true') {\r\n          console.log('🔍 OnboardingGuard: Onboarding was just completed, allowing access');\r\n          setHasCompletedOnboarding(true);\r\n          setLoading(false);\r\n          // Clear the just completed flag\r\n          localStorage.removeItem('onboarding_just_completed');\r\n          return;\r\n        }\r\n        \r\n        // First, try a simple health check to test connectivity\r\n        try {\r\n          console.log('🔍 OnboardingGuard: Testing profile API connectivity...');\r\n          await profileAPI.health();\r\n          console.log('🔍 OnboardingGuard: Profile API is responsive');\r\n        } catch (healthError: any) {\r\n          console.warn('🔍 OnboardingGuard: Profile API health check failed:', healthError.message);\r\n          // Continue anyway, the main request might still work\r\n        }\r\n        \r\n        // Try to get profile with retry mechanism\r\n        let response: any = null;\r\n        let retryCount = 0;\r\n        const maxRetries = 2;\r\n        \r\n        while (retryCount <= maxRetries) {\r\n          try {\r\n            response = await profileAPI.get();\r\n            break; // Success, exit retry loop\r\n          } catch (retryError: any) {\r\n            retryCount++;\r\n            console.log(`🔍 OnboardingGuard: Profile check attempt ${retryCount} failed:`, retryError.message);\r\n            \r\n            if (retryCount > maxRetries) {\r\n              throw retryError; // Re-throw the error if we've exhausted retries\r\n            }\r\n            \r\n            // Wait before retrying (exponential backoff)\r\n            await new Promise(resolve => setTimeout(resolve, 1000 * retryCount));\r\n          }\r\n        }\r\n        \r\n        // Check if we got a valid response\r\n        if (!response || !response.data) {\r\n          throw new Error('No valid response received from profile API');\r\n        }\r\n        \r\n        console.log('🔍 OnboardingGuard: Full API response:', response.data);\r\n        \r\n        // Check if user has daily_calories set (key onboarding field)\r\n        const profile = response.data.profile;\r\n        const hasCompletedOnboardingFromAPI = response.data.hasCompletedOnboarding;\r\n        \r\n        // Use utility function for consistent onboarding completion check\r\n        const completed = hasCompletedOnboardingFromProfile(profile);\r\n        \r\n        console.log('🔍 OnboardingGuard: Profile object:', profile);\r\n        console.log('🔍 OnboardingGuard: daily_calories value:', profile?.daily_calories);\r\n        console.log('🔍 OnboardingGuard: daily_protein value:', profile?.daily_protein);\r\n        console.log('🔍 OnboardingGuard: hasCompletedOnboarding from API:', hasCompletedOnboardingFromAPI);\r\n        console.log('🔍 OnboardingGuard: Calculated completed:', completed);\r\n        console.log('🔍 OnboardingGuard: Final decision - Has completed onboarding:', completed);\r\n        \r\n        setHasCompletedOnboarding(completed);\r\n        setError(null);\r\n      } catch (error: any) {\r\n        console.error('🔍 OnboardingGuard: Error checking onboarding status:', error);\r\n        console.error('🔍 OnboardingGuard: Error response:', error.response);\r\n        console.error('🔍 OnboardingGuard: Error code:', error.code);\r\n        console.error('🔍 OnboardingGuard: Error message:', error.message);\r\n        \r\n        if (error?.response?.status === 404) {\r\n          // No profile exists = hasn't completed onboarding\r\n          console.log('🔍 OnboardingGuard: No profile found (404) = not completed');\r\n          setHasCompletedOnboarding(false);\r\n        } else if (error.code === 'ERR_NETWORK' || error.message?.includes('Network Error') || error.code === 'ERR_FAILED') {\r\n          // Network error or server down - check localStorage as fallback\r\n          console.log('🔍 OnboardingGuard: Network/server error, checking localStorage fallback');\r\n          console.log('🔍 OnboardingGuard: Error details:', { code: error.code, message: error.message });\r\n          \r\n          const onboardingCompleted = localStorage.getItem('onboarding_completed');\r\n          const onboardingDate = localStorage.getItem('onboarding_completed_date');\r\n          \r\n          if (onboardingCompleted === 'true') {\r\n            console.log('🔍 OnboardingGuard: localStorage indicates onboarding completed on:', onboardingDate);\r\n            setHasCompletedOnboarding(true);\r\n            setError('Server temporarily unavailable - using cached data');\r\n          } else {\r\n            console.log('🔍 OnboardingGuard: localStorage indicates onboarding not completed');\r\n            setHasCompletedOnboarding(false);\r\n            setError('Server temporarily unavailable - please try again');\r\n          }\r\n        } else {\r\n          // For other errors, assume they haven't completed onboarding to be safe\r\n          console.log('🔍 OnboardingGuard: Error occurred, assuming not completed');\r\n          setHasCompletedOnboarding(false);\r\n          setError('Unable to verify onboarding status');\r\n        }\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    checkOnboardingStatus();\r\n  }, [requireOnboarding]);\r\n\r\n  if (loading) {\r\n    return <LoadingSpinner />;\r\n  }\r\n\r\n  // If we require onboarding to be completed but it's not\r\n  if (requireOnboarding && !hasCompletedOnboarding) {\r\n    console.log('🚫 OnboardingGuard: REDIRECT DECISION - Need onboarding completed but it is not');\r\n    console.log('🚫 OnboardingGuard: requireOnboarding =', requireOnboarding, 'hasCompletedOnboarding =', hasCompletedOnboarding);\r\n    console.log('🚫 OnboardingGuard: Redirecting to /onboarding');\r\n    return <Navigate to=\"/onboarding\" replace />;\r\n  }\r\n\r\n  // If we require onboarding to NOT be completed but it is\r\n  if (!requireOnboarding && hasCompletedOnboarding) {\r\n    console.log('🚫 OnboardingGuard: REDIRECT DECISION - Onboarding should not be completed but it is');\r\n    console.log('🚫 OnboardingGuard: requireOnboarding =', requireOnboarding, 'hasCompletedOnboarding =', hasCompletedOnboarding);\r\n    console.log('🚫 OnboardingGuard: Redirecting to /dashboard');\r\n    return <Navigate to=\"/dashboard\" replace />;\r\n  }\r\n\r\n  // Show error if there was one, but still allow access\r\n  if (error) {\r\n    console.warn('⚠️ OnboardingGuard: Proceeding despite error:', error);\r\n  }\r\n\r\n  console.log('✅ OnboardingGuard: Access granted');\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default OnboardingGuard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}